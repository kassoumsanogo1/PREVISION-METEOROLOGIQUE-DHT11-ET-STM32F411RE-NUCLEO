
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c14  08004c14  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c1c  08004c1c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c1c  08004c1c  00014c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000006c  08004c90  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004c90  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfef  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed7  00000000  00000000  0002c0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  0002dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088d  00000000  00000000  0002eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001634d  00000000  00000000  0002f335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e052  00000000  00000000  00045682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088b27  00000000  00000000  000536d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032ec  00000000  00000000  000dc1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000df4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b60 	.word	0x08004b60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004b60 	.word	0x08004b60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b970 	b.w	8000b94 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9e08      	ldr	r6, [sp, #32]
 80008d2:	460d      	mov	r5, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	460f      	mov	r7, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4694      	mov	ip, r2
 80008e0:	d965      	bls.n	80009ae <__udivmoddi4+0xe2>
 80008e2:	fab2 f382 	clz	r3, r2
 80008e6:	b143      	cbz	r3, 80008fa <__udivmoddi4+0x2e>
 80008e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008ec:	f1c3 0220 	rsb	r2, r3, #32
 80008f0:	409f      	lsls	r7, r3
 80008f2:	fa20 f202 	lsr.w	r2, r0, r2
 80008f6:	4317      	orrs	r7, r2
 80008f8:	409c      	lsls	r4, r3
 80008fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008fe:	fa1f f58c 	uxth.w	r5, ip
 8000902:	fbb7 f1fe 	udiv	r1, r7, lr
 8000906:	0c22      	lsrs	r2, r4, #16
 8000908:	fb0e 7711 	mls	r7, lr, r1, r7
 800090c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000910:	fb01 f005 	mul.w	r0, r1, r5
 8000914:	4290      	cmp	r0, r2
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x62>
 8000918:	eb1c 0202 	adds.w	r2, ip, r2
 800091c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000920:	f080 811c 	bcs.w	8000b5c <__udivmoddi4+0x290>
 8000924:	4290      	cmp	r0, r2
 8000926:	f240 8119 	bls.w	8000b5c <__udivmoddi4+0x290>
 800092a:	3902      	subs	r1, #2
 800092c:	4462      	add	r2, ip
 800092e:	1a12      	subs	r2, r2, r0
 8000930:	b2a4      	uxth	r4, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800093e:	fb00 f505 	mul.w	r5, r0, r5
 8000942:	42a5      	cmp	r5, r4
 8000944:	d90a      	bls.n	800095c <__udivmoddi4+0x90>
 8000946:	eb1c 0404 	adds.w	r4, ip, r4
 800094a:	f100 32ff 	add.w	r2, r0, #4294967295
 800094e:	f080 8107 	bcs.w	8000b60 <__udivmoddi4+0x294>
 8000952:	42a5      	cmp	r5, r4
 8000954:	f240 8104 	bls.w	8000b60 <__udivmoddi4+0x294>
 8000958:	4464      	add	r4, ip
 800095a:	3802      	subs	r0, #2
 800095c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	2100      	movs	r1, #0
 8000964:	b11e      	cbz	r6, 800096e <__udivmoddi4+0xa2>
 8000966:	40dc      	lsrs	r4, r3
 8000968:	2300      	movs	r3, #0
 800096a:	e9c6 4300 	strd	r4, r3, [r6]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0xbc>
 8000976:	2e00      	cmp	r6, #0
 8000978:	f000 80ed 	beq.w	8000b56 <__udivmoddi4+0x28a>
 800097c:	2100      	movs	r1, #0
 800097e:	e9c6 0500 	strd	r0, r5, [r6]
 8000982:	4608      	mov	r0, r1
 8000984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000988:	fab3 f183 	clz	r1, r3
 800098c:	2900      	cmp	r1, #0
 800098e:	d149      	bne.n	8000a24 <__udivmoddi4+0x158>
 8000990:	42ab      	cmp	r3, r5
 8000992:	d302      	bcc.n	800099a <__udivmoddi4+0xce>
 8000994:	4282      	cmp	r2, r0
 8000996:	f200 80f8 	bhi.w	8000b8a <__udivmoddi4+0x2be>
 800099a:	1a84      	subs	r4, r0, r2
 800099c:	eb65 0203 	sbc.w	r2, r5, r3
 80009a0:	2001      	movs	r0, #1
 80009a2:	4617      	mov	r7, r2
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d0e2      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a8:	e9c6 4700 	strd	r4, r7, [r6]
 80009ac:	e7df      	b.n	800096e <__udivmoddi4+0xa2>
 80009ae:	b902      	cbnz	r2, 80009b2 <__udivmoddi4+0xe6>
 80009b0:	deff      	udf	#255	; 0xff
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 8090 	bne.w	8000adc <__udivmoddi4+0x210>
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2101      	movs	r1, #1
 80009c8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009cc:	fb07 2015 	mls	r0, r7, r5, r2
 80009d0:	0c22      	lsrs	r2, r4, #16
 80009d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009d6:	fb0e f005 	mul.w	r0, lr, r5
 80009da:	4290      	cmp	r0, r2
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x124>
 80009de:	eb1c 0202 	adds.w	r2, ip, r2
 80009e2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x122>
 80009e8:	4290      	cmp	r0, r2
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2b8>
 80009ee:	4645      	mov	r5, r8
 80009f0:	1a12      	subs	r2, r2, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009f8:	fb07 2210 	mls	r2, r7, r0, r2
 80009fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x14e>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x14c>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2c2>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a22:	e79f      	b.n	8000964 <__udivmoddi4+0x98>
 8000a24:	f1c1 0720 	rsb	r7, r1, #32
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa05 f401 	lsl.w	r4, r5, r1
 8000a36:	fa20 f307 	lsr.w	r3, r0, r7
 8000a3a:	40fd      	lsrs	r5, r7
 8000a3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a40:	4323      	orrs	r3, r4
 8000a42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a4e:	0c1c      	lsrs	r4, r3, #16
 8000a50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a54:	fb08 f50e 	mul.w	r5, r8, lr
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b0>
 8000a64:	eb1c 0404 	adds.w	r4, ip, r4
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2b4>
 8000a70:	42a5      	cmp	r5, r4
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2b4>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4464      	add	r4, ip
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	b29d      	uxth	r5, r3
 8000a80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a84:	fb09 4413 	mls	r4, r9, r3, r4
 8000a88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1da>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2ac>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2ac>
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	4464      	add	r4, ip
 8000aa6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000aae:	eba4 040e 	sub.w	r4, r4, lr
 8000ab2:	42ac      	cmp	r4, r5
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46ae      	mov	lr, r5
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x29c>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x298>
 8000abc:	b156      	cbz	r6, 8000ad4 <__udivmoddi4+0x208>
 8000abe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ac2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ac6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aca:	40ca      	lsrs	r2, r1
 8000acc:	40cc      	lsrs	r4, r1
 8000ace:	4317      	orrs	r7, r2
 8000ad0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000adc:	f1c3 0120 	rsb	r1, r3, #32
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ae8:	fa25 f101 	lsr.w	r1, r5, r1
 8000aec:	409d      	lsls	r5, r3
 8000aee:	432a      	orrs	r2, r5
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afc:	fb07 1510 	mls	r5, r7, r0, r1
 8000b00:	0c11      	lsrs	r1, r2, #16
 8000b02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b06:	fb00 f50e 	mul.w	r5, r0, lr
 8000b0a:	428d      	cmp	r5, r1
 8000b0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x258>
 8000b12:	eb1c 0101 	adds.w	r1, ip, r1
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b1c:	428d      	cmp	r5, r1
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4461      	add	r1, ip
 8000b24:	1b49      	subs	r1, r1, r5
 8000b26:	b292      	uxth	r2, r2
 8000b28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b34:	fb05 f10e 	mul.w	r1, r5, lr
 8000b38:	4291      	cmp	r1, r2
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x282>
 8000b3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000b46:	4291      	cmp	r1, r2
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000b4a:	3d02      	subs	r5, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a52      	subs	r2, r2, r1
 8000b50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0xfc>
 8000b56:	4631      	mov	r1, r6
 8000b58:	4630      	mov	r0, r6
 8000b5a:	e708      	b.n	800096e <__udivmoddi4+0xa2>
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e6e6      	b.n	800092e <__udivmoddi4+0x62>
 8000b60:	4610      	mov	r0, r2
 8000b62:	e6fb      	b.n	800095c <__udivmoddi4+0x90>
 8000b64:	4548      	cmp	r0, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f0>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b70:	3b01      	subs	r3, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f0>
 8000b74:	4645      	mov	r5, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b78:	462b      	mov	r3, r5
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1da>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x258>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b0>
 8000b84:	3d02      	subs	r5, #2
 8000b86:	4462      	add	r2, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x124>
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e70a      	b.n	80009a4 <__udivmoddi4+0xd8>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x14e>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <DWT_Delay_Init+0x58>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <DWT_Delay_Init+0x58>)
 8000ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ba6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <DWT_Delay_Init+0x58>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <DWT_Delay_Init+0x58>)
 8000bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bb2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <DWT_Delay_Init+0x5c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <DWT_Delay_Init+0x5c>)
 8000bba:	f023 0301 	bic.w	r3, r3, #1
 8000bbe:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <DWT_Delay_Init+0x5c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	; (8000bf4 <DWT_Delay_Init+0x5c>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <DWT_Delay_Init+0x5c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000bd2:	bf00      	nop
     __ASM volatile ("NOP");
 8000bd4:	bf00      	nop
 __ASM volatile ("NOP");
 8000bd6:	bf00      	nop

  /* Check if clock cycle counter has started */
	
			 if(DWT->CYCCNT)
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <DWT_Delay_Init+0x5c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <DWT_Delay_Init+0x4c>
				 {
					 return 0; /*clock cycle counter started*/
 8000be0:	2300      	movs	r3, #0
 8000be2:	e000      	b.n	8000be6 <DWT_Delay_Init+0x4e>
				 }
			 else
				{
					return 1; /*clock cycle counter not started*/
 8000be4:	2301      	movs	r3, #1
				}
				

		
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000edf0 	.word	0xe000edf0
 8000bf4:	e0001000 	.word	0xe0001000

08000bf8 <delay>:

 void delay(volatile uint32_t microseconds)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <delay+0x40>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000c06:	f002 fbb5 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <delay+0x44>)
 8000c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c12:	0c9b      	lsrs	r3, r3, #18
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	fb02 f303 	mul.w	r3, r2, r3
 8000c1a:	607b      	str	r3, [r7, #4]
	 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000c1c:	bf00      	nop
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <delay+0x40>)
 8000c20:	685a      	ldr	r2, [r3, #4]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	1ad2      	subs	r2, r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d3f8      	bcc.n	8000c1e <delay+0x26>
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e0001000 	.word	0xe0001000
 8000c3c:	431bde83 	.word	0x431bde83

08000c40 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c5c:	887b      	ldrh	r3, [r7, #2]
 8000c5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f001 f8c8 	bl	8001e04 <HAL_GPIO_Init>
}
 8000c74:	bf00      	nop
 8000c76:	3720      	adds	r7, #32
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	4619      	mov	r1, r3
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f001 f8aa 	bl	8001e04 <HAL_GPIO_Init>
}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <DHT_Start>:


void DHT_Start (void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000cbc:	f7ff ff6c 	bl	8000b98 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <DHT_Start+0x40>)
 8000cc4:	f7ff ffbc 	bl	8000c40 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_RESET);   // pull the pin low
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2101      	movs	r1, #1
 8000ccc:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <DHT_Start+0x40>)
 8000cce:	f001 fa35 	bl	800213c <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000cd2:	f244 6050 	movw	r0, #18000	; 0x4650
 8000cd6:	f7ff ff8f 	bl	8000bf8 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_SET);   // pull the pin high
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <DHT_Start+0x40>)
 8000ce0:	f001 fa2c 	bl	800213c <HAL_GPIO_WritePin>
    delay(30);   // wait for 30us
 8000ce4:	201e      	movs	r0, #30
 8000ce6:	f7ff ff87 	bl	8000bf8 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000cea:	2101      	movs	r1, #1
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <DHT_Start+0x40>)
 8000cee:	f7ff ffc5 	bl	8000c7c <Set_Pin_Input>
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40020000 	.word	0x40020000

08000cfc <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	71fb      	strb	r3, [r7, #7]
	delay (50);
 8000d06:	2032      	movs	r0, #50	; 0x32
 8000d08:	f7ff ff76 	bl	8000bf8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	4811      	ldr	r0, [pc, #68]	; (8000d54 <DHT_Check_Response+0x58>)
 8000d10:	f001 f9fc 	bl	800210c <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10e      	bne.n	8000d38 <DHT_Check_Response+0x3c>
	{
		delay (100);
 8000d1a:	2064      	movs	r0, #100	; 0x64
 8000d1c:	f7ff ff6c 	bl	8000bf8 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) 
 8000d20:	2101      	movs	r1, #1
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <DHT_Check_Response+0x58>)
 8000d24:	f001 f9f2 	bl	800210c <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <DHT_Check_Response+0x38>
		{
			Response = 1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	e001      	b.n	8000d38 <DHT_Check_Response+0x3c>
		}
		else 
		{
			Response = -1;
 8000d34:	23ff      	movs	r3, #255	; 0xff
 8000d36:	71fb      	strb	r3, [r7, #7]
		}
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000d38:	bf00      	nop
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <DHT_Check_Response+0x58>)
 8000d3e:	f001 f9e5 	bl	800210c <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1f8      	bne.n	8000d3a <DHT_Check_Response+0x3e>

	return Response;
 8000d48:	79fb      	ldrb	r3, [r7, #7]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020000 	.word	0x40020000

08000d58 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71bb      	strb	r3, [r7, #6]
 8000d62:	e037      	b.n	8000dd4 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000d64:	bf00      	nop
 8000d66:	2101      	movs	r1, #1
 8000d68:	481e      	ldr	r0, [pc, #120]	; (8000de4 <DHT_Read+0x8c>)
 8000d6a:	f001 f9cf 	bl	800210c <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f8      	beq.n	8000d66 <DHT_Read+0xe>
		delay (50);   // wait for 40 us
 8000d74:	2032      	movs	r0, #50	; 0x32
 8000d76:	f7ff ff3f 	bl	8000bf8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	4819      	ldr	r0, [pc, #100]	; (8000de4 <DHT_Read+0x8c>)
 8000d7e:	f001 f9c5 	bl	800210c <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10e      	bne.n	8000da6 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2201      	movs	r2, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	b25a      	sxtb	r2, r3
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	e00b      	b.n	8000dbe <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	f1c3 0307 	rsb	r3, r3, #7
 8000dac:	2201      	movs	r2, #1
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	b25a      	sxtb	r2, r3
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000dbe:	bf00      	nop
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <DHT_Read+0x8c>)
 8000dc4:	f001 f9a2 	bl	800210c <HAL_GPIO_ReadPin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f8      	bne.n	8000dc0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	71bb      	strb	r3, [r7, #6]
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	2b07      	cmp	r3, #7
 8000dd8:	d9c4      	bls.n	8000d64 <DHT_Read+0xc>
	}
	return i;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40020000 	.word	0x40020000

08000de8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  DHT_Start ();
 8000df0:	f7ff ff62 	bl	8000cb8 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000df4:	f7ff ff82 	bl	8000cfc <DHT_Check_Response>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <DHT_GetData+0xa4>)
 8000dfe:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000e00:	f7ff ffaa 	bl	8000d58 <DHT_Read>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <DHT_GetData+0xa8>)
 8000e0a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000e0c:	f7ff ffa4 	bl	8000d58 <DHT_Read>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <DHT_GetData+0xac>)
 8000e16:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000e18:	f7ff ff9e 	bl	8000d58 <DHT_Read>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <DHT_GetData+0xb0>)
 8000e22:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000e24:	f7ff ff98 	bl	8000d58 <DHT_Read>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <DHT_GetData+0xb4>)
 8000e2e:	701a      	strb	r2, [r3, #0]

	
	SUM = DHT_Read();
 8000e30:	f7ff ff92 	bl	8000d58 <DHT_Read>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <DHT_GetData+0xb8>)
 8000e3a:	801a      	strh	r2, [r3, #0]
	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <DHT_GetData+0xb8>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <DHT_GetData+0xa8>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <DHT_GetData+0xac>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <DHT_GetData+0xb0>)
 8000e50:	7812      	ldrb	r2, [r2, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <DHT_GetData+0xb4>)
 8000e56:	7812      	ldrb	r2, [r2, #0]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d111      	bne.n	8000e82 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <DHT_GetData+0xb0>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	ee07 3a90 	vmov	s15, r3
 8000e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <DHT_GetData+0xa8>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	ee07 3a90 	vmov	s15, r3
 8000e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	edc3 7a01 	vstr	s15, [r3, #4]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
	
	
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000008e 	.word	0x2000008e
 8000e90:	20000088 	.word	0x20000088
 8000e94:	20000089 	.word	0x20000089
 8000e98:	2000008a 	.word	0x2000008a
 8000e9c:	2000008b 	.word	0x2000008b
 8000ea0:	2000008c 	.word	0x2000008c

08000ea4 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000eae:	4a38      	ldr	r2, [pc, #224]	; (8000f90 <HD44780_Init+0xec>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000eb4:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <HD44780_Init+0xf0>)
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000eba:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <HD44780_Init+0xf4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000ec0:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <HD44780_Init+0xec>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d907      	bls.n	8000ed8 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <HD44780_Init+0xf4>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <HD44780_Init+0xf4>)
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	e006      	b.n	8000ee6 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HD44780_Init+0xf4>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <HD44780_Init+0xf4>)
 8000ee4:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000ee6:	f000 f985 	bl	80011f4 <DelayInit>
  HAL_Delay(50);
 8000eea:	2032      	movs	r0, #50	; 0x32
 8000eec:	f000 fdc2 	bl	8001a74 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <HD44780_Init+0xf0>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f943 	bl	8001180 <ExpanderWrite>
  HAL_Delay(1000);
 8000efa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000efe:	f000 fdb9 	bl	8001a74 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000f02:	2030      	movs	r0, #48	; 0x30
 8000f04:	f000 f92b 	bl	800115e <Write4Bits>
  DelayUS(4500);
 8000f08:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f0c:	f000 f99c 	bl	8001248 <DelayUS>

  Write4Bits(0x03 << 4);
 8000f10:	2030      	movs	r0, #48	; 0x30
 8000f12:	f000 f924 	bl	800115e <Write4Bits>
  DelayUS(4500);
 8000f16:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f1a:	f000 f995 	bl	8001248 <DelayUS>

  Write4Bits(0x03 << 4);
 8000f1e:	2030      	movs	r0, #48	; 0x30
 8000f20:	f000 f91d 	bl	800115e <Write4Bits>
  DelayUS(4500);
 8000f24:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f28:	f000 f98e 	bl	8001248 <DelayUS>

  Write4Bits(0x02 << 4);
 8000f2c:	2020      	movs	r0, #32
 8000f2e:	f000 f916 	bl	800115e <Write4Bits>
  DelayUS(100);
 8000f32:	2064      	movs	r0, #100	; 0x64
 8000f34:	f000 f988 	bl	8001248 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HD44780_Init+0xf4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	f043 0320 	orr.w	r3, r3, #32
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f8ce 	bl	80010e4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HD44780_Init+0xf8>)
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000f4e:	f000 f875 	bl	800103c <HD44780_Display>
  HD44780_Clear();
 8000f52:	f000 f82b 	bl	8000fac <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HD44780_Init+0xfc>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HD44780_Init+0xfc>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f8bc 	bl	80010e4 <SendCommand>
  DelayUS(4500);
 8000f6c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f70:	f000 f96a 	bl	8001248 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000f74:	490b      	ldr	r1, [pc, #44]	; (8000fa4 <HD44780_Init+0x100>)
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f876 	bl	8001068 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000f7c:	490a      	ldr	r1, [pc, #40]	; (8000fa8 <HD44780_Init+0x104>)
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f000 f872 	bl	8001068 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000f84:	f000 f81d 	bl	8000fc2 <HD44780_Home>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000092 	.word	0x20000092
 8000f94:	20000093 	.word	0x20000093
 8000f98:	2000008f 	.word	0x2000008f
 8000f9c:	20000090 	.word	0x20000090
 8000fa0:	20000091 	.word	0x20000091
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000008 	.word	0x20000008

08000fac <HD44780_Clear>:

void HD44780_Clear()
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 f897 	bl	80010e4 <SendCommand>
  DelayUS(2000);
 8000fb6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fba:	f000 f945 	bl	8001248 <DelayUS>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HD44780_Home>:

void HD44780_Home()
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f000 f88c 	bl	80010e4 <SendCommand>
  DelayUS(2000);
 8000fcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fd0:	f000 f93a 	bl	8001248 <DelayUS>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HD44780_SetCursor+0x5c>)
 8000fea:	f107 0408 	add.w	r4, r7, #8
 8000fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HD44780_SetCursor+0x60>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	79ba      	ldrb	r2, [r7, #6]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d303      	bcc.n	8001006 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HD44780_SetCursor+0x60>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	3b01      	subs	r3, #1
 8001004:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	3318      	adds	r3, #24
 800100c:	443b      	add	r3, r7
 800100e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4413      	add	r3, r2
 8001018:	b2db      	uxtb	r3, r3
 800101a:	b25b      	sxtb	r3, r3
 800101c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001020:	b25b      	sxtb	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f85d 	bl	80010e4 <SendCommand>
}
 800102a:	bf00      	nop
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}
 8001032:	bf00      	nop
 8001034:	08004b78 	.word	0x08004b78
 8001038:	20000092 	.word	0x20000092

0800103c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HD44780_Display+0x28>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HD44780_Display+0x28>)
 800104c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HD44780_Display+0x28>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f843 	bl	80010e4 <SendCommand>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000090 	.word	0x20000090

08001068 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	b25b      	sxtb	r3, r3
 8001082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001086:	b25b      	sxtb	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f82a 	bl	80010e4 <SendCommand>
  for (int i=0; i<8; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e009      	b.n	80010aa <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f82e 	bl	8001100 <SendChar>
  for (int i=0; i<8; i++)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b07      	cmp	r3, #7
 80010ae:	ddf2      	ble.n	8001096 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80010c2:	e006      	b.n	80010d2 <HD44780_PrintStr+0x18>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f817 	bl	8001100 <SendChar>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f4      	bne.n	80010c4 <HD44780_PrintStr+0xa>
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f812 	bl	800111c <Send>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2101      	movs	r1, #1
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f804 	bl	800111c <Send>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	460a      	mov	r2, r1
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	4613      	mov	r3, r2
 800112a:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f023 030f 	bic.w	r3, r3, #15
 8001132:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	4313      	orrs	r3, r2
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f80b 	bl	800115e <Write4Bits>
  Write4Bits((lownib)|mode);
 8001148:	7bba      	ldrb	r2, [r7, #14]
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	4313      	orrs	r3, r2
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f804 	bl	800115e <Write4Bits>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f808 	bl	8001180 <ExpanderWrite>
  PulseEnable(value);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f820 	bl	80011b8 <PulseEnable>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <ExpanderWrite+0x30>)
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4313      	orrs	r3, r2
 8001192:	b2db      	uxtb	r3, r3
 8001194:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001196:	f107 020f 	add.w	r2, r7, #15
 800119a:	230a      	movs	r3, #10
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	2148      	movs	r1, #72	; 0x48
 80011a2:	4804      	ldr	r0, [pc, #16]	; (80011b4 <ExpanderWrite+0x34>)
 80011a4:	f001 f928 	bl	80023f8 <HAL_I2C_Master_Transmit>
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000093 	.word	0x20000093
 80011b4:	20000094 	.word	0x20000094

080011b8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffd8 	bl	8001180 <ExpanderWrite>
  DelayUS(20);
 80011d0:	2014      	movs	r0, #20
 80011d2:	f000 f839 	bl	8001248 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f023 0304 	bic.w	r3, r3, #4
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ffce 	bl	8001180 <ExpanderWrite>
  DelayUS(20);
 80011e4:	2014      	movs	r0, #20
 80011e6:	f000 f82f 	bl	8001248 <DelayUS>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <DelayInit>:

static void DelayInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <DelayInit+0x4c>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4a10      	ldr	r2, [pc, #64]	; (8001240 <DelayInit+0x4c>)
 80011fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001202:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <DelayInit+0x4c>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <DelayInit+0x4c>)
 800120a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800120e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <DelayInit+0x50>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <DelayInit+0x50>)
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <DelayInit+0x50>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a08      	ldr	r2, [pc, #32]	; (8001244 <DelayInit+0x50>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <DelayInit+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800122e:	bf00      	nop
  __ASM volatile ("NOP");
 8001230:	bf00      	nop
  __ASM volatile ("NOP");
 8001232:	bf00      	nop
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000edf0 	.word	0xe000edf0
 8001244:	e0001000 	.word	0xe0001000

08001248 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <DelayUS+0x44>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <DelayUS+0x48>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0c9a      	lsrs	r2, r3, #18
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <DelayUS+0x4c>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <DelayUS+0x4c>)
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f6      	bhi.n	800126a <DelayUS+0x22>
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	371c      	adds	r7, #28
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000010 	.word	0x20000010
 8001290:	431bde83 	.word	0x431bde83
 8001294:	e0001000 	.word	0xe0001000

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129e:	f000 fb77 	bl	8001990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a2:	f000 f8db 	bl	800145c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a6:	f000 f999 	bl	80015dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012aa:	f000 f96d 	bl	8001588 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012ae:	f000 f93d 	bl	800152c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  DHT_GetData(&DHT11_Data);
 80012b2:	485f      	ldr	r0, [pc, #380]	; (8001430 <main+0x198>)
 80012b4:	f7ff fd98 	bl	8000de8 <DHT_GetData>
  Temperature = DHT11_Data.Temperature;
 80012b8:	4b5d      	ldr	r3, [pc, #372]	; (8001430 <main+0x198>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c2:	ee17 2a90 	vmov	r2, s15
 80012c6:	4b5b      	ldr	r3, [pc, #364]	; (8001434 <main+0x19c>)
 80012c8:	601a      	str	r2, [r3, #0]
  Humidity = DHT11_Data.Humidity;
 80012ca:	4b59      	ldr	r3, [pc, #356]	; (8001430 <main+0x198>)
 80012cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80012d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d4:	ee17 2a90 	vmov	r2, s15
 80012d8:	4b57      	ldr	r3, [pc, #348]	; (8001438 <main+0x1a0>)
 80012da:	601a      	str	r2, [r3, #0]
  Indice_chaleur = -2.7+1.04*Temperature + 0.2*Humidity;
 80012dc:	4b55      	ldr	r3, [pc, #340]	; (8001434 <main+0x19c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fa49 	bl	8000778 <__aeabi_i2d>
 80012e6:	a34c      	add	r3, pc, #304	; (adr r3, 8001418 <main+0x180>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7fe ffc8 	bl	8000280 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	a349      	add	r3, pc, #292	; (adr r3, 8001420 <main+0x188>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff f8ed 	bl	80004dc <__aeabi_dsub>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4614      	mov	r4, r2
 8001308:	461d      	mov	r5, r3
 800130a:	4b4b      	ldr	r3, [pc, #300]	; (8001438 <main+0x1a0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fa32 	bl	8000778 <__aeabi_i2d>
 8001314:	a344      	add	r3, pc, #272	; (adr r3, 8001428 <main+0x190>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7fe ffb1 	bl	8000280 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7ff f8db 	bl	80004e0 <__adddf3>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fa8b 	bl	800084c <__aeabi_d2iz>
 8001336:	4603      	mov	r3, r0
 8001338:	4a40      	ldr	r2, [pc, #256]	; (800143c <main+0x1a4>)
 800133a:	6013      	str	r3, [r2, #0]

  HD44780_Init(2);
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff fdb1 	bl	8000ea4 <HD44780_Init>
  HD44780_Clear();
 8001342:	f7ff fe33 	bl	8000fac <HD44780_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    HD44780_SetCursor(0,0);
 8001346:	2100      	movs	r1, #0
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff fe45 	bl	8000fd8 <HD44780_SetCursor>
	    HD44780_PrintStr("Temperature:");
 800134e:	483c      	ldr	r0, [pc, #240]	; (8001440 <main+0x1a8>)
 8001350:	f7ff feb3 	bl	80010ba <HD44780_PrintStr>


	    char Temperatur[5];
	    sprintf(Temperatur, "%d", Temperature);
 8001354:	4b37      	ldr	r3, [pc, #220]	; (8001434 <main+0x19c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135c:	4939      	ldr	r1, [pc, #228]	; (8001444 <main+0x1ac>)
 800135e:	4618      	mov	r0, r3
 8001360:	f002 ff5a 	bl	8004218 <siprintf>
	    HD44780_SetCursor(12,0);
 8001364:	2100      	movs	r1, #0
 8001366:	200c      	movs	r0, #12
 8001368:	f7ff fe36 	bl	8000fd8 <HD44780_SetCursor>
	    HD44780_PrintStr(Temperatur);
 800136c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fea2 	bl	80010ba <HD44780_PrintStr>
	    HD44780_SetCursor(14,0);
 8001376:	2100      	movs	r1, #0
 8001378:	200e      	movs	r0, #14
 800137a:	f7ff fe2d 	bl	8000fd8 <HD44780_SetCursor>
	    HD44780_PrintStr("C");
 800137e:	4832      	ldr	r0, [pc, #200]	; (8001448 <main+0x1b0>)
 8001380:	f7ff fe9b 	bl	80010ba <HD44780_PrintStr>

	    HD44780_SetCursor(0,1);
 8001384:	2101      	movs	r1, #1
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff fe26 	bl	8000fd8 <HD44780_SetCursor>
	    HD44780_PrintStr("Humidite");
 800138c:	482f      	ldr	r0, [pc, #188]	; (800144c <main+0x1b4>)
 800138e:	f7ff fe94 	bl	80010ba <HD44780_PrintStr>

	    char Humidit[20];
	    sprintf(Humidit, ":%d", Humidity);
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <main+0x1a0>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	492d      	ldr	r1, [pc, #180]	; (8001450 <main+0x1b8>)
 800139c:	4618      	mov	r0, r3
 800139e:	f002 ff3b 	bl	8004218 <siprintf>
	    HD44780_SetCursor(11,1);
 80013a2:	2101      	movs	r1, #1
 80013a4:	200b      	movs	r0, #11
 80013a6:	f7ff fe17 	bl	8000fd8 <HD44780_SetCursor>
	    HD44780_PrintStr(Humidit);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fe83 	bl	80010ba <HD44780_PrintStr>
	    HD44780_SetCursor(14,1);
 80013b4:	2101      	movs	r1, #1
 80013b6:	200e      	movs	r0, #14
 80013b8:	f7ff fe0e 	bl	8000fd8 <HD44780_SetCursor>
	    HD44780_PrintStr("%");
 80013bc:	4825      	ldr	r0, [pc, #148]	; (8001454 <main+0x1bc>)
 80013be:	f7ff fe7c 	bl	80010ba <HD44780_PrintStr>
	    HAL_Delay(2000);
 80013c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013c6:	f000 fb55 	bl	8001a74 <HAL_Delay>

	    HD44780_Clear();
 80013ca:	f7ff fdef 	bl	8000fac <HD44780_Clear>

	    HD44780_SetCursor(0,0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff fe01 	bl	8000fd8 <HD44780_SetCursor>
	    HD44780_PrintStr("Indice Chaleur :");
 80013d6:	4820      	ldr	r0, [pc, #128]	; (8001458 <main+0x1c0>)
 80013d8:	f7ff fe6f 	bl	80010ba <HD44780_PrintStr>

	    char Indice[20];
	    sprintf(Indice, "%d", Indice_chaleur);
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <main+0x1a4>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	463b      	mov	r3, r7
 80013e2:	4918      	ldr	r1, [pc, #96]	; (8001444 <main+0x1ac>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 ff17 	bl	8004218 <siprintf>
	    HD44780_SetCursor(7,1);
 80013ea:	2101      	movs	r1, #1
 80013ec:	2007      	movs	r0, #7
 80013ee:	f7ff fdf3 	bl	8000fd8 <HD44780_SetCursor>
	    HD44780_PrintStr(Indice);
 80013f2:	463b      	mov	r3, r7
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fe60 	bl	80010ba <HD44780_PrintStr>
	    HD44780_SetCursor(9,1);
 80013fa:	2101      	movs	r1, #1
 80013fc:	2009      	movs	r0, #9
 80013fe:	f7ff fdeb 	bl	8000fd8 <HD44780_SetCursor>
	    HD44780_PrintStr("%");
 8001402:	4814      	ldr	r0, [pc, #80]	; (8001454 <main+0x1bc>)
 8001404:	f7ff fe59 	bl	80010ba <HD44780_PrintStr>

	    HAL_Delay(2000);
 8001408:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800140c:	f000 fb32 	bl	8001a74 <HAL_Delay>
	    HD44780_Clear();
 8001410:	f7ff fdcc 	bl	8000fac <HD44780_Clear>
  {
 8001414:	e797      	b.n	8001346 <main+0xae>
 8001416:	bf00      	nop
 8001418:	0a3d70a4 	.word	0x0a3d70a4
 800141c:	3ff0a3d7 	.word	0x3ff0a3d7
 8001420:	9999999a 	.word	0x9999999a
 8001424:	40059999 	.word	0x40059999
 8001428:	9999999a 	.word	0x9999999a
 800142c:	3fc99999 	.word	0x3fc99999
 8001430:	20000130 	.word	0x20000130
 8001434:	20000138 	.word	0x20000138
 8001438:	2000013c 	.word	0x2000013c
 800143c:	20000140 	.word	0x20000140
 8001440:	08004b88 	.word	0x08004b88
 8001444:	08004b98 	.word	0x08004b98
 8001448:	08004b9c 	.word	0x08004b9c
 800144c:	08004ba0 	.word	0x08004ba0
 8001450:	08004bac 	.word	0x08004bac
 8001454:	08004bb0 	.word	0x08004bb0
 8001458:	08004bb4 	.word	0x08004bb4

0800145c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b094      	sub	sp, #80	; 0x50
 8001460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	2230      	movs	r2, #48	; 0x30
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fef4 	bl	8004258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <SystemClock_Config+0xc8>)
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	4a26      	ldr	r2, [pc, #152]	; (8001524 <SystemClock_Config+0xc8>)
 800148a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <SystemClock_Config+0xc8>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <SystemClock_Config+0xcc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a20      	ldr	r2, [pc, #128]	; (8001528 <SystemClock_Config+0xcc>)
 80014a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <SystemClock_Config+0xcc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b8:	2301      	movs	r3, #1
 80014ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c2:	2302      	movs	r3, #2
 80014c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014cc:	2304      	movs	r3, #4
 80014ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014d0:	2348      	movs	r3, #72	; 0x48
 80014d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d4:	2302      	movs	r3, #2
 80014d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014d8:	2304      	movs	r3, #4
 80014da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 fae3 	bl	8002aac <HAL_RCC_OscConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014ec:	f000 f8e4 	bl	80016b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f0:	230f      	movs	r3, #15
 80014f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f4:	2302      	movs	r3, #2
 80014f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	2102      	movs	r1, #2
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fd45 	bl	8002f9c <HAL_RCC_ClockConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001518:	f000 f8ce 	bl	80016b8 <Error_Handler>
  }
}
 800151c:	bf00      	nop
 800151e:	3750      	adds	r7, #80	; 0x50
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000

0800152c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_I2C1_Init+0x50>)
 8001532:	4a13      	ldr	r2, [pc, #76]	; (8001580 <MX_I2C1_Init+0x54>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_I2C1_Init+0x50>)
 8001538:	4a12      	ldr	r2, [pc, #72]	; (8001584 <MX_I2C1_Init+0x58>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_I2C1_Init+0x50>)
 800154a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <MX_I2C1_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_I2C1_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <MX_I2C1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_I2C1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_I2C1_Init+0x50>)
 800156a:	f000 fe01 	bl	8002170 <HAL_I2C_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001574:	f000 f8a0 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000094 	.word	0x20000094
 8001580:	40005400 	.word	0x40005400
 8001584:	000186a0 	.word	0x000186a0

08001588 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_USART2_UART_Init+0x50>)
 8001590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USART2_UART_Init+0x4c>)
 80015c0:	f001 ff0c 	bl	80033dc <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ca:	f000 f875 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000e8 	.word	0x200000e8
 80015d8:	40004400 	.word	0x40004400

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <MX_GPIO_Init+0xd0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a2c      	ldr	r2, [pc, #176]	; (80016ac <MX_GPIO_Init+0xd0>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a25      	ldr	r2, [pc, #148]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b23      	ldr	r3, [pc, #140]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_GPIO_Init+0xd0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_GPIO_Init+0xd0>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a17      	ldr	r2, [pc, #92]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2121      	movs	r1, #33	; 0x21
 8001666:	4812      	ldr	r0, [pc, #72]	; (80016b0 <MX_GPIO_Init+0xd4>)
 8001668:	f000 fd68 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800166c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001672:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <MX_GPIO_Init+0xd8>)
 8001684:	f000 fbbe 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8001688:	2321      	movs	r3, #33	; 0x21
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_GPIO_Init+0xd4>)
 80016a0:	f000 fbb0 	bl	8001e04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020800 	.word	0x40020800

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>
	...

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_MspInit+0x4c>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001702:	2007      	movs	r0, #7
 8001704:	f000 faaa 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800

08001714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_I2C_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12c      	bne.n	8001790 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_I2C_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_I2C_MspInit+0x88>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_I2C_MspInit+0x88>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001752:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001758:	2312      	movs	r3, #18
 800175a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001764:	2304      	movs	r3, #4
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	480c      	ldr	r0, [pc, #48]	; (80017a0 <HAL_I2C_MspInit+0x8c>)
 8001770:	f000 fb48 	bl	8001e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_I2C_MspInit+0x88>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_I2C_MspInit+0x88>)
 800177e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_I2C_MspInit+0x88>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40005400 	.word	0x40005400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <HAL_UART_MspInit+0x94>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d133      	bne.n	800182e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_UART_MspInit+0x98>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a1b      	ldr	r2, [pc, #108]	; (800183c <HAL_UART_MspInit+0x98>)
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <HAL_UART_MspInit+0x98>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_UART_MspInit+0x98>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_UART_MspInit+0x98>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_UART_MspInit+0x98>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017fe:	230c      	movs	r3, #12
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800180e:	2307      	movs	r3, #7
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <HAL_UART_MspInit+0x9c>)
 800181a:	f000 faf3 	bl	8001e04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	2026      	movs	r0, #38	; 0x26
 8001824:	f000 fa25 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001828:	2026      	movs	r0, #38	; 0x26
 800182a:	f000 fa3e 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40004400 	.word	0x40004400
 800183c:	40023800 	.word	0x40023800
 8001840:	40020000 	.word	0x40020000

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001848:	e7fe      	b.n	8001848 <NMI_Handler+0x4>

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 f8d0 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <USART2_IRQHandler+0x10>)
 800189e:	f001 fded 	bl	800347c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200000e8 	.word	0x200000e8

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f002 fcc4 	bl	8004268 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20020000 	.word	0x20020000
 800190c:	00000400 	.word	0x00000400
 8001910:	20000144 	.word	0x20000144
 8001914:	20000298 	.word	0x20000298

08001918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <SystemInit+0x20>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <SystemInit+0x20>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001974 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001940:	f7ff ffea 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001948:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800195c:	4c0a      	ldr	r4, [pc, #40]	; (8001988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196a:	f002 fc83 	bl	8004274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196e:	f7ff fc93 	bl	8001298 <main>
  bx  lr    
 8001972:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001980:	08004c24 	.word	0x08004c24
  ldr r2, =_sbss
 8001984:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001988:	20000294 	.word	0x20000294

0800198c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>
	...

08001990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <HAL_Init+0x40>)
 800199a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <HAL_Init+0x40>)
 80019a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_Init+0x40>)
 80019b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 f94f 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f808 	bl	80019d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c4:	f7ff fe7e 	bl	80016c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x54>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x58>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f967 	bl	8001cc6 <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 f92f 	bl	8001c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x5c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000010 	.word	0x20000010
 8001a2c:	20000018 	.word	0x20000018
 8001a30:	20000014 	.word	0x20000014

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000018 	.word	0x20000018
 8001a58:	20000148 	.word	0x20000148

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000148 	.word	0x20000148

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_Delay+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a9a:	bf00      	nop
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000018 	.word	0x20000018

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c28:	d301      	bcc.n	8001c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <SysTick_Config+0x40>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c36:	210f      	movs	r1, #15
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f7ff ff8e 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <SysTick_Config+0x40>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <SysTick_Config+0x40>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff29 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c84:	f7ff ff3e 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f7ff ff8e 	bl	8001bb0 <NVIC_EncodePriority>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff5d 	bl	8001b5c <__NVIC_SetPriority>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff31 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffa2 	bl	8001c18 <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff feb6 	bl	8001a5c <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d008      	beq.n	8001d10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2280      	movs	r2, #128	; 0x80
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e052      	b.n	8001db6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0216 	bic.w	r2, r2, #22
 8001d1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d103      	bne.n	8001d40 <HAL_DMA_Abort+0x62>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0208 	bic.w	r2, r2, #8
 8001d4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d60:	e013      	b.n	8001d8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d62:	f7ff fe7b 	bl	8001a5c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d90c      	bls.n	8001d8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e015      	b.n	8001db6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1e4      	bne.n	8001d62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	223f      	movs	r2, #63	; 0x3f
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d004      	beq.n	8001ddc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2280      	movs	r2, #128	; 0x80
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e00c      	b.n	8001df6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2205      	movs	r2, #5
 8001de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e159      	b.n	80020d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e20:	2201      	movs	r2, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f040 8148 	bne.w	80020ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d005      	beq.n	8001e56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d130      	bne.n	8001eb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 0201 	and.w	r2, r3, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d017      	beq.n	8001ef4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d123      	bne.n	8001f48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	08da      	lsrs	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3208      	adds	r2, #8
 8001f42:	69b9      	ldr	r1, [r7, #24]
 8001f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80a2 	beq.w	80020ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b57      	ldr	r3, [pc, #348]	; (80020ec <HAL_GPIO_Init+0x2e8>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a56      	ldr	r2, [pc, #344]	; (80020ec <HAL_GPIO_Init+0x2e8>)
 8001f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b54      	ldr	r3, [pc, #336]	; (80020ec <HAL_GPIO_Init+0x2e8>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa6:	4a52      	ldr	r2, [pc, #328]	; (80020f0 <HAL_GPIO_Init+0x2ec>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a49      	ldr	r2, [pc, #292]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d019      	beq.n	8002006 <HAL_GPIO_Init+0x202>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a48      	ldr	r2, [pc, #288]	; (80020f8 <HAL_GPIO_Init+0x2f4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0x1fe>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a47      	ldr	r2, [pc, #284]	; (80020fc <HAL_GPIO_Init+0x2f8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_GPIO_Init+0x1fa>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a46      	ldr	r2, [pc, #280]	; (8002100 <HAL_GPIO_Init+0x2fc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <HAL_GPIO_Init+0x1f6>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a45      	ldr	r2, [pc, #276]	; (8002104 <HAL_GPIO_Init+0x300>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_GPIO_Init+0x1f2>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x204>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x2ec>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002026:	4b38      	ldr	r3, [pc, #224]	; (8002108 <HAL_GPIO_Init+0x304>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204a:	4a2f      	ldr	r2, [pc, #188]	; (8002108 <HAL_GPIO_Init+0x304>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_GPIO_Init+0x304>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002074:	4a24      	ldr	r2, [pc, #144]	; (8002108 <HAL_GPIO_Init+0x304>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <HAL_GPIO_Init+0x304>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209e:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c8:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_GPIO_Init+0x304>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f aea2 	bls.w	8001e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40013c00 	.word	0x40013c00

0800210c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	887b      	ldrh	r3, [r7, #2]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e001      	b.n	800212e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
 8002148:	4613      	mov	r3, r2
 800214a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800214c:	787b      	ldrb	r3, [r7, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	041a      	lsls	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	619a      	str	r2, [r3, #24]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e12b      	b.n	80023da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fabc 	bl	8001714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2224      	movs	r2, #36	; 0x24
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021d4:	f001 f8da 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 80021d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4a81      	ldr	r2, [pc, #516]	; (80023e4 <HAL_I2C_Init+0x274>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d807      	bhi.n	80021f4 <HAL_I2C_Init+0x84>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4a80      	ldr	r2, [pc, #512]	; (80023e8 <HAL_I2C_Init+0x278>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	bf94      	ite	ls
 80021ec:	2301      	movls	r3, #1
 80021ee:	2300      	movhi	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	e006      	b.n	8002202 <HAL_I2C_Init+0x92>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a7d      	ldr	r2, [pc, #500]	; (80023ec <HAL_I2C_Init+0x27c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	bf94      	ite	ls
 80021fc:	2301      	movls	r3, #1
 80021fe:	2300      	movhi	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0e7      	b.n	80023da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a78      	ldr	r2, [pc, #480]	; (80023f0 <HAL_I2C_Init+0x280>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	0c9b      	lsrs	r3, r3, #18
 8002214:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	430a      	orrs	r2, r1
 8002228:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4a6a      	ldr	r2, [pc, #424]	; (80023e4 <HAL_I2C_Init+0x274>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d802      	bhi.n	8002244 <HAL_I2C_Init+0xd4>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	3301      	adds	r3, #1
 8002242:	e009      	b.n	8002258 <HAL_I2C_Init+0xe8>
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	4a69      	ldr	r2, [pc, #420]	; (80023f4 <HAL_I2C_Init+0x284>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	099b      	lsrs	r3, r3, #6
 8002256:	3301      	adds	r3, #1
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	430b      	orrs	r3, r1
 800225e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800226a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	495c      	ldr	r1, [pc, #368]	; (80023e4 <HAL_I2C_Init+0x274>)
 8002274:	428b      	cmp	r3, r1
 8002276:	d819      	bhi.n	80022ac <HAL_I2C_Init+0x13c>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e59      	subs	r1, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fbb1 f3f3 	udiv	r3, r1, r3
 8002286:	1c59      	adds	r1, r3, #1
 8002288:	f640 73fc 	movw	r3, #4092	; 0xffc
 800228c:	400b      	ands	r3, r1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_I2C_Init+0x138>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1e59      	subs	r1, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a6:	e051      	b.n	800234c <HAL_I2C_Init+0x1dc>
 80022a8:	2304      	movs	r3, #4
 80022aa:	e04f      	b.n	800234c <HAL_I2C_Init+0x1dc>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d111      	bne.n	80022d8 <HAL_I2C_Init+0x168>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e58      	subs	r0, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	440b      	add	r3, r1
 80022c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e012      	b.n	80022fe <HAL_I2C_Init+0x18e>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1e58      	subs	r0, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	0099      	lsls	r1, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Init+0x196>
 8002302:	2301      	movs	r3, #1
 8002304:	e022      	b.n	800234c <HAL_I2C_Init+0x1dc>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10e      	bne.n	800232c <HAL_I2C_Init+0x1bc>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1e58      	subs	r0, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6859      	ldr	r1, [r3, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	440b      	add	r3, r1
 800231c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002320:	3301      	adds	r3, #1
 8002322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232a:	e00f      	b.n	800234c <HAL_I2C_Init+0x1dc>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1e58      	subs	r0, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	0099      	lsls	r1, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002342:	3301      	adds	r3, #1
 8002344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002348:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	6809      	ldr	r1, [r1, #0]
 8002350:	4313      	orrs	r3, r2
 8002352:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800237a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6911      	ldr	r1, [r2, #16]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68d2      	ldr	r2, [r2, #12]
 8002386:	4311      	orrs	r1, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	430b      	orrs	r3, r1
 800238e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	000186a0 	.word	0x000186a0
 80023e8:	001e847f 	.word	0x001e847f
 80023ec:	003d08ff 	.word	0x003d08ff
 80023f0:	431bde83 	.word	0x431bde83
 80023f4:	10624dd3 	.word	0x10624dd3

080023f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	461a      	mov	r2, r3
 8002404:	460b      	mov	r3, r1
 8002406:	817b      	strh	r3, [r7, #10]
 8002408:	4613      	mov	r3, r2
 800240a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800240c:	f7ff fb26 	bl	8001a5c <HAL_GetTick>
 8002410:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b20      	cmp	r3, #32
 800241c:	f040 80e0 	bne.w	80025e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2319      	movs	r3, #25
 8002426:	2201      	movs	r2, #1
 8002428:	4970      	ldr	r1, [pc, #448]	; (80025ec <HAL_I2C_Master_Transmit+0x1f4>)
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f964 	bl	80026f8 <I2C_WaitOnFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002436:	2302      	movs	r3, #2
 8002438:	e0d3      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_I2C_Master_Transmit+0x50>
 8002444:	2302      	movs	r3, #2
 8002446:	e0cc      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d007      	beq.n	800246e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800247c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2221      	movs	r2, #33	; 0x21
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2210      	movs	r2, #16
 800248a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	893a      	ldrh	r2, [r7, #8]
 800249e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4a50      	ldr	r2, [pc, #320]	; (80025f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024b0:	8979      	ldrh	r1, [r7, #10]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f89c 	bl	80025f4 <I2C_MasterRequestWrite>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e08d      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024dc:	e066      	b.n	80025ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	6a39      	ldr	r1, [r7, #32]
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fa22 	bl	800292c <I2C_WaitOnTXEFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00d      	beq.n	800250a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d107      	bne.n	8002506 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002504:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06b      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b04      	cmp	r3, #4
 8002546:	d11b      	bne.n	8002580 <HAL_I2C_Master_Transmit+0x188>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	d017      	beq.n	8002580 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	6a39      	ldr	r1, [r7, #32]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fa19 	bl	80029bc <I2C_WaitOnBTFFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00d      	beq.n	80025ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	2b04      	cmp	r3, #4
 8002596:	d107      	bne.n	80025a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e01a      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d194      	bne.n	80024de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
  }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	00100002 	.word	0x00100002
 80025f0:	ffff0000 	.word	0xffff0000

080025f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	460b      	mov	r3, r1
 8002602:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d006      	beq.n	800261e <I2C_MasterRequestWrite+0x2a>
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d003      	beq.n	800261e <I2C_MasterRequestWrite+0x2a>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800261c:	d108      	bne.n	8002630 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e00b      	b.n	8002648 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	2b12      	cmp	r3, #18
 8002636:	d107      	bne.n	8002648 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002646:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f84f 	bl	80026f8 <I2C_WaitOnFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266e:	d103      	bne.n	8002678 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e035      	b.n	80026e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002684:	d108      	bne.n	8002698 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002694:	611a      	str	r2, [r3, #16]
 8002696:	e01b      	b.n	80026d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002698:	897b      	ldrh	r3, [r7, #10]
 800269a:	11db      	asrs	r3, r3, #7
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f003 0306 	and.w	r3, r3, #6
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	f063 030f 	orn	r3, r3, #15
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	490e      	ldr	r1, [pc, #56]	; (80026f0 <I2C_MasterRequestWrite+0xfc>)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f898 	bl	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e010      	b.n	80026e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4907      	ldr	r1, [pc, #28]	; (80026f4 <I2C_MasterRequestWrite+0x100>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f888 	bl	80027ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	00010008 	.word	0x00010008
 80026f4:	00010002 	.word	0x00010002

080026f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002708:	e048      	b.n	800279c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d044      	beq.n	800279c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002712:	f7ff f9a3 	bl	8001a5c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d302      	bcc.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d139      	bne.n	800279c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	0c1b      	lsrs	r3, r3, #16
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d10d      	bne.n	800274e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	43da      	mvns	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4013      	ands	r3, r2
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	e00c      	b.n	8002768 <I2C_WaitOnFlagUntilTimeout+0x70>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	43da      	mvns	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	4013      	ands	r3, r2
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	429a      	cmp	r2, r3
 800276c:	d116      	bne.n	800279c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f043 0220 	orr.w	r2, r3, #32
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e023      	b.n	80027e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	0c1b      	lsrs	r3, r3, #16
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d10d      	bne.n	80027c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	43da      	mvns	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4013      	ands	r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	e00c      	b.n	80027dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	43da      	mvns	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4013      	ands	r3, r2
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d093      	beq.n	800270a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027fa:	e071      	b.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280a:	d123      	bne.n	8002854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 0204 	orr.w	r2, r3, #4
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e067      	b.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	d041      	beq.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285c:	f7ff f8fe 	bl	8001a5c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	429a      	cmp	r2, r3
 800286a:	d302      	bcc.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d136      	bne.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d10c      	bne.n	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4013      	ands	r3, r2
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	bf14      	ite	ne
 800288e:	2301      	movne	r3, #1
 8002890:	2300      	moveq	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	e00b      	b.n	80028ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	43da      	mvns	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4013      	ands	r3, r2
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf14      	ite	ne
 80028a8:	2301      	movne	r3, #1
 80028aa:	2300      	moveq	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	f043 0220 	orr.w	r2, r3, #32
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e021      	b.n	8002924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10c      	bne.n	8002904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	43da      	mvns	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf14      	ite	ne
 80028fc:	2301      	movne	r3, #1
 80028fe:	2300      	moveq	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e00b      	b.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	f47f af6d 	bne.w	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002938:	e034      	b.n	80029a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f886 	bl	8002a4c <I2C_IsAcknowledgeFailed>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e034      	b.n	80029b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d028      	beq.n	80029a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002952:	f7ff f883 	bl	8001a5c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	429a      	cmp	r2, r3
 8002960:	d302      	bcc.n	8002968 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d11d      	bne.n	80029a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b80      	cmp	r3, #128	; 0x80
 8002974:	d016      	beq.n	80029a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e007      	b.n	80029b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b80      	cmp	r3, #128	; 0x80
 80029b0:	d1c3      	bne.n	800293a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029c8:	e034      	b.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f83e 	bl	8002a4c <I2C_IsAcknowledgeFailed>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e034      	b.n	8002a44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d028      	beq.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e2:	f7ff f83b 	bl	8001a5c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d302      	bcc.n	80029f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11d      	bne.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d016      	beq.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f043 0220 	orr.w	r2, r3, #32
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e007      	b.n	8002a44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d1c3      	bne.n	80029ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	d11b      	bne.n	8002a9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f043 0204 	orr.w	r2, r3, #4
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e267      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d075      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aca:	4b88      	ldr	r3, [pc, #544]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d00c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad6:	4b85      	ldr	r3, [pc, #532]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d112      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae2:	4b82      	ldr	r3, [pc, #520]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aee:	d10b      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	4b7e      	ldr	r3, [pc, #504]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d05b      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x108>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d157      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e242      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d106      	bne.n	8002b20 <HAL_RCC_OscConfig+0x74>
 8002b12:	4b76      	ldr	r3, [pc, #472]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a75      	ldr	r2, [pc, #468]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e01d      	b.n	8002b5c <HAL_RCC_OscConfig+0xb0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x98>
 8002b2a:	4b70      	ldr	r3, [pc, #448]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a6f      	ldr	r2, [pc, #444]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b6d      	ldr	r3, [pc, #436]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a6c      	ldr	r2, [pc, #432]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_OscConfig+0xb0>
 8002b44:	4b69      	ldr	r3, [pc, #420]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a68      	ldr	r2, [pc, #416]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b66      	ldr	r3, [pc, #408]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a65      	ldr	r2, [pc, #404]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fe ff7a 	bl	8001a5c <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7fe ff76 	bl	8001a5c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e207      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b5b      	ldr	r3, [pc, #364]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0xc0>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe ff66 	bl	8001a5c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fe ff62 	bl	8001a5c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1f3      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	4b51      	ldr	r3, [pc, #324]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0xe8>
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d063      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc2:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d11c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bda:	4b44      	ldr	r3, [pc, #272]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d116      	bne.n	8002c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	4b41      	ldr	r3, [pc, #260]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_RCC_OscConfig+0x152>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e1c7      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4937      	ldr	r1, [pc, #220]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	e03a      	b.n	8002c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c1c:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <HAL_RCC_OscConfig+0x244>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe ff1b 	bl	8001a5c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7fe ff17 	bl	8001a5c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e1a8      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4925      	ldr	r1, [pc, #148]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
 8002c5c:	e015      	b.n	8002c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_RCC_OscConfig+0x244>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe fefa 	bl	8001a5c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6c:	f7fe fef6 	bl	8001a5c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e187      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d036      	beq.n	8002d04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d016      	beq.n	8002ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <HAL_RCC_OscConfig+0x248>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe feda 	bl	8001a5c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cac:	f7fe fed6 	bl	8001a5c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e167      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_OscConfig+0x240>)
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x200>
 8002cca:	e01b      	b.n	8002d04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCC_OscConfig+0x248>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fec3 	bl	8001a5c <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	e00e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cda:	f7fe febf 	bl	8001a5c <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d907      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e150      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	42470000 	.word	0x42470000
 8002cf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf8:	4b88      	ldr	r3, [pc, #544]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ea      	bne.n	8002cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8097 	beq.w	8002e40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d12:	2300      	movs	r3, #0
 8002d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d16:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10f      	bne.n	8002d42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	4b7d      	ldr	r3, [pc, #500]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4a7c      	ldr	r2, [pc, #496]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	6413      	str	r3, [r2, #64]	; 0x40
 8002d32:	4b7a      	ldr	r3, [pc, #488]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	4b77      	ldr	r3, [pc, #476]	; (8002f20 <HAL_RCC_OscConfig+0x474>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d118      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4e:	4b74      	ldr	r3, [pc, #464]	; (8002f20 <HAL_RCC_OscConfig+0x474>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a73      	ldr	r2, [pc, #460]	; (8002f20 <HAL_RCC_OscConfig+0x474>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fe7f 	bl	8001a5c <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d62:	f7fe fe7b 	bl	8001a5c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e10c      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <HAL_RCC_OscConfig+0x474>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x2ea>
 8002d88:	4b64      	ldr	r3, [pc, #400]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4a63      	ldr	r2, [pc, #396]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6713      	str	r3, [r2, #112]	; 0x70
 8002d94:	e01c      	b.n	8002dd0 <HAL_RCC_OscConfig+0x324>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b05      	cmp	r3, #5
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x30c>
 8002d9e:	4b5f      	ldr	r3, [pc, #380]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	4a5e      	ldr	r2, [pc, #376]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002da4:	f043 0304 	orr.w	r3, r3, #4
 8002da8:	6713      	str	r3, [r2, #112]	; 0x70
 8002daa:	4b5c      	ldr	r3, [pc, #368]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	4a5b      	ldr	r2, [pc, #364]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6713      	str	r3, [r2, #112]	; 0x70
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0x324>
 8002db8:	4b58      	ldr	r3, [pc, #352]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a57      	ldr	r2, [pc, #348]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc4:	4b55      	ldr	r3, [pc, #340]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	4a54      	ldr	r2, [pc, #336]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002dca:	f023 0304 	bic.w	r3, r3, #4
 8002dce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d015      	beq.n	8002e04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fe40 	bl	8001a5c <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dde:	e00a      	b.n	8002df6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de0:	f7fe fe3c 	bl	8001a5c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e0cb      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df6:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0ee      	beq.n	8002de0 <HAL_RCC_OscConfig+0x334>
 8002e02:	e014      	b.n	8002e2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e04:	f7fe fe2a 	bl	8001a5c <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fe26 	bl	8001a5c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0b5      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e22:	4b3e      	ldr	r3, [pc, #248]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1ee      	bne.n	8002e0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e34:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	4a38      	ldr	r2, [pc, #224]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80a1 	beq.w	8002f8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e4a:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d05c      	beq.n	8002f10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d141      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_RCC_OscConfig+0x478>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe fdfa 	bl	8001a5c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fdf6 	bl	8001a5c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e087      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69da      	ldr	r2, [r3, #28]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	019b      	lsls	r3, r3, #6
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	061b      	lsls	r3, r3, #24
 8002eae:	491b      	ldr	r1, [pc, #108]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_RCC_OscConfig+0x478>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe fdcf 	bl	8001a5c <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fe fdcb 	bl	8001a5c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e05c      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x416>
 8002ee0:	e054      	b.n	8002f8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_RCC_OscConfig+0x478>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fdb8 	bl	8001a5c <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe fdb4 	bl	8001a5c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e045      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_RCC_OscConfig+0x470>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x444>
 8002f0e:	e03d      	b.n	8002f8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d107      	bne.n	8002f28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e038      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40007000 	.word	0x40007000
 8002f24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCC_OscConfig+0x4ec>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d028      	beq.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d121      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d11a      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f58:	4013      	ands	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d111      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	085b      	lsrs	r3, r3, #1
 8002f70:	3b01      	subs	r3, #1
 8002f72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800

08002f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0cc      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b68      	ldr	r3, [pc, #416]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d90c      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b65      	ldr	r3, [pc, #404]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b63      	ldr	r3, [pc, #396]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b8      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff0:	4b59      	ldr	r3, [pc, #356]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a58      	ldr	r2, [pc, #352]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003014:	4b50      	ldr	r3, [pc, #320]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	494d      	ldr	r1, [pc, #308]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d044      	beq.n	80030bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d119      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e07f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d003      	beq.n	800305a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003056:	2b03      	cmp	r3, #3
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e06f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e067      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 0203 	bic.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4934      	ldr	r1, [pc, #208]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800308c:	f7fe fce6 	bl	8001a5c <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	e00a      	b.n	80030aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7fe fce2 	bl	8001a5c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e04f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 020c 	and.w	r2, r3, #12
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d1eb      	bne.n	8003094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d20c      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e032      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f0:	4b19      	ldr	r3, [pc, #100]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4916      	ldr	r1, [pc, #88]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	490e      	ldr	r1, [pc, #56]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003122:	f000 f821 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003126:	4602      	mov	r2, r0
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	490a      	ldr	r1, [pc, #40]	; (800315c <HAL_RCC_ClockConfig+0x1c0>)
 8003134:	5ccb      	ldrb	r3, [r1, r3]
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fc46 	bl	80019d4 <HAL_InitTick>

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023c00 	.word	0x40023c00
 8003158:	40023800 	.word	0x40023800
 800315c:	08004bc8 	.word	0x08004bc8
 8003160:	20000010 	.word	0x20000010
 8003164:	20000014 	.word	0x20000014

08003168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800316c:	b094      	sub	sp, #80	; 0x50
 800316e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	647b      	str	r3, [r7, #68]	; 0x44
 8003174:	2300      	movs	r3, #0
 8003176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003178:	2300      	movs	r3, #0
 800317a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003180:	4b79      	ldr	r3, [pc, #484]	; (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b08      	cmp	r3, #8
 800318a:	d00d      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x40>
 800318c:	2b08      	cmp	r3, #8
 800318e:	f200 80e1 	bhi.w	8003354 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x34>
 8003196:	2b04      	cmp	r3, #4
 8003198:	d003      	beq.n	80031a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800319a:	e0db      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b73      	ldr	r3, [pc, #460]	; (800336c <HAL_RCC_GetSysClockFreq+0x204>)
 800319e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031a0:	e0db      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a2:	4b73      	ldr	r3, [pc, #460]	; (8003370 <HAL_RCC_GetSysClockFreq+0x208>)
 80031a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031a6:	e0d8      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a8:	4b6f      	ldr	r3, [pc, #444]	; (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031b2:	4b6d      	ldr	r3, [pc, #436]	; (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d063      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031be:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	2200      	movs	r2, #0
 80031c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30
 80031d2:	2300      	movs	r3, #0
 80031d4:	637b      	str	r3, [r7, #52]	; 0x34
 80031d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031da:	4622      	mov	r2, r4
 80031dc:	462b      	mov	r3, r5
 80031de:	f04f 0000 	mov.w	r0, #0
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	0159      	lsls	r1, r3, #5
 80031e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ec:	0150      	lsls	r0, r2, #5
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4621      	mov	r1, r4
 80031f4:	1a51      	subs	r1, r2, r1
 80031f6:	6139      	str	r1, [r7, #16]
 80031f8:	4629      	mov	r1, r5
 80031fa:	eb63 0301 	sbc.w	r3, r3, r1
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800320c:	4659      	mov	r1, fp
 800320e:	018b      	lsls	r3, r1, #6
 8003210:	4651      	mov	r1, sl
 8003212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003216:	4651      	mov	r1, sl
 8003218:	018a      	lsls	r2, r1, #6
 800321a:	4651      	mov	r1, sl
 800321c:	ebb2 0801 	subs.w	r8, r2, r1
 8003220:	4659      	mov	r1, fp
 8003222:	eb63 0901 	sbc.w	r9, r3, r1
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800323a:	4690      	mov	r8, r2
 800323c:	4699      	mov	r9, r3
 800323e:	4623      	mov	r3, r4
 8003240:	eb18 0303 	adds.w	r3, r8, r3
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	462b      	mov	r3, r5
 8003248:	eb49 0303 	adc.w	r3, r9, r3
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800325a:	4629      	mov	r1, r5
 800325c:	024b      	lsls	r3, r1, #9
 800325e:	4621      	mov	r1, r4
 8003260:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003264:	4621      	mov	r1, r4
 8003266:	024a      	lsls	r2, r1, #9
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800326e:	2200      	movs	r2, #0
 8003270:	62bb      	str	r3, [r7, #40]	; 0x28
 8003272:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003274:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003278:	f7fd fb10 	bl	800089c <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4613      	mov	r3, r2
 8003282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003284:	e058      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003286:	4b38      	ldr	r3, [pc, #224]	; (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	2200      	movs	r2, #0
 800328e:	4618      	mov	r0, r3
 8003290:	4611      	mov	r1, r2
 8003292:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003296:	623b      	str	r3, [r7, #32]
 8003298:	2300      	movs	r3, #0
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
 800329c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032a0:	4642      	mov	r2, r8
 80032a2:	464b      	mov	r3, r9
 80032a4:	f04f 0000 	mov.w	r0, #0
 80032a8:	f04f 0100 	mov.w	r1, #0
 80032ac:	0159      	lsls	r1, r3, #5
 80032ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b2:	0150      	lsls	r0, r2, #5
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4641      	mov	r1, r8
 80032ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80032be:	4649      	mov	r1, r9
 80032c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032d8:	ebb2 040a 	subs.w	r4, r2, sl
 80032dc:	eb63 050b 	sbc.w	r5, r3, fp
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	00eb      	lsls	r3, r5, #3
 80032ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ee:	00e2      	lsls	r2, r4, #3
 80032f0:	4614      	mov	r4, r2
 80032f2:	461d      	mov	r5, r3
 80032f4:	4643      	mov	r3, r8
 80032f6:	18e3      	adds	r3, r4, r3
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	464b      	mov	r3, r9
 80032fc:	eb45 0303 	adc.w	r3, r5, r3
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800330e:	4629      	mov	r1, r5
 8003310:	028b      	lsls	r3, r1, #10
 8003312:	4621      	mov	r1, r4
 8003314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003318:	4621      	mov	r1, r4
 800331a:	028a      	lsls	r2, r1, #10
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003322:	2200      	movs	r2, #0
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	61fa      	str	r2, [r7, #28]
 8003328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800332c:	f7fd fab6 	bl	800089c <__aeabi_uldivmod>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4613      	mov	r3, r2
 8003336:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_GetSysClockFreq+0x200>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	3301      	adds	r3, #1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800334a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003352:	e002      	b.n	800335a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCC_GetSysClockFreq+0x204>)
 8003356:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800335c:	4618      	mov	r0, r3
 800335e:	3750      	adds	r7, #80	; 0x50
 8003360:	46bd      	mov	sp, r7
 8003362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	00f42400 	.word	0x00f42400
 8003370:	007a1200 	.word	0x007a1200

08003374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <HAL_RCC_GetHCLKFreq+0x14>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000010 	.word	0x20000010

0800338c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003390:	f7ff fff0 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	0a9b      	lsrs	r3, r3, #10
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	4903      	ldr	r1, [pc, #12]	; (80033b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a2:	5ccb      	ldrb	r3, [r1, r3]
 80033a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40023800 	.word	0x40023800
 80033b0:	08004bd8 	.word	0x08004bd8

080033b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033b8:	f7ff ffdc 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0b5b      	lsrs	r3, r3, #13
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4903      	ldr	r1, [pc, #12]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40023800 	.word	0x40023800
 80033d8:	08004bd8 	.word	0x08004bd8

080033dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e042      	b.n	8003474 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fe f9ce 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	; 0x24
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800341e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fc85 	bl	8003d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b0ba      	sub	sp, #232	; 0xe8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10f      	bne.n	80034e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_UART_IRQHandler+0x66>
 80034ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fb69 	bl	8003bb2 <UART_Receive_IT>
      return;
 80034e0:	e25b      	b.n	800399a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80de 	beq.w	80036a8 <HAL_UART_IRQHandler+0x22c>
 80034ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d106      	bne.n	8003506 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80d1 	beq.w	80036a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <HAL_UART_IRQHandler+0xae>
 8003512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f043 0201 	orr.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800352a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <HAL_UART_IRQHandler+0xd2>
 8003536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f043 0202 	orr.w	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00b      	beq.n	8003572 <HAL_UART_IRQHandler+0xf6>
 800355a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d011      	beq.n	80035a2 <HAL_UART_IRQHandler+0x126>
 800357e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800358a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f043 0208 	orr.w	r2, r3, #8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 81f2 	beq.w	8003990 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_UART_IRQHandler+0x14e>
 80035b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 faf4 	bl	8003bb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d103      	bne.n	80035f6 <HAL_UART_IRQHandler+0x17a>
 80035ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d04f      	beq.n	8003696 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f9fc 	bl	80039f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d141      	bne.n	800368e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3314      	adds	r3, #20
 8003610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3314      	adds	r3, #20
 8003632:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003636:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800363a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003642:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800364e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1d9      	bne.n	800360a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d013      	beq.n	8003686 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	4a7e      	ldr	r2, [pc, #504]	; (800385c <HAL_UART_IRQHandler+0x3e0>)
 8003664:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fba7 	bl	8001dbe <HAL_DMA_Abort_IT>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d016      	beq.n	80036a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003680:	4610      	mov	r0, r2
 8003682:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003684:	e00e      	b.n	80036a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f99e 	bl	80039c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800368c:	e00a      	b.n	80036a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f99a 	bl	80039c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003694:	e006      	b.n	80036a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f996 	bl	80039c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80036a2:	e175      	b.n	8003990 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a4:	bf00      	nop
    return;
 80036a6:	e173      	b.n	8003990 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	f040 814f 	bne.w	8003950 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8148 	beq.w	8003950 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8141 	beq.w	8003950 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	f040 80b6 	bne.w	8003860 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003700:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8145 	beq.w	8003994 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800370e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003712:	429a      	cmp	r2, r3
 8003714:	f080 813e 	bcs.w	8003994 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800371e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372a:	f000 8088 	beq.w	800383e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	330c      	adds	r3, #12
 8003734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800373c:	e853 3f00 	ldrex	r3, [r3]
 8003740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003744:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800374c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800375a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800375e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003766:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1d9      	bne.n	800372e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3314      	adds	r3, #20
 8003780:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800378a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3314      	adds	r3, #20
 800379a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800379e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e1      	bne.n	800377a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3314      	adds	r3, #20
 80037bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3314      	adds	r3, #20
 80037d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e3      	bne.n	80037b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800380c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380e:	f023 0310 	bic.w	r3, r3, #16
 8003812:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	330c      	adds	r3, #12
 800381c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003820:	65ba      	str	r2, [r7, #88]	; 0x58
 8003822:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003826:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800382e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e3      	bne.n	80037fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe fa50 	bl	8001cde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800384c:	b29b      	uxth	r3, r3
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	b29b      	uxth	r3, r3
 8003852:	4619      	mov	r1, r3
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f8c1 	bl	80039dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800385a:	e09b      	b.n	8003994 <HAL_UART_IRQHandler+0x518>
 800385c:	08003abb 	.word	0x08003abb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003868:	b29b      	uxth	r3, r3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 808e 	beq.w	8003998 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800387c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8089 	beq.w	8003998 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800389c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	330c      	adds	r3, #12
 80038a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038aa:	647a      	str	r2, [r7, #68]	; 0x44
 80038ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e3      	bne.n	8003886 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3314      	adds	r3, #20
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	623b      	str	r3, [r7, #32]
   return(result);
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3314      	adds	r3, #20
 80038de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038e2:	633a      	str	r2, [r7, #48]	; 0x30
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e3      	bne.n	80038be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	60fb      	str	r3, [r7, #12]
   return(result);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0310 	bic.w	r3, r3, #16
 800391a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	330c      	adds	r3, #12
 8003924:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003928:	61fa      	str	r2, [r7, #28]
 800392a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	617b      	str	r3, [r7, #20]
   return(result);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e3      	bne.n	8003904 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003942:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f847 	bl	80039dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800394e:	e023      	b.n	8003998 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <HAL_UART_IRQHandler+0x4f4>
 800395c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f8ba 	bl	8003ae2 <UART_Transmit_IT>
    return;
 800396e:	e014      	b.n	800399a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00e      	beq.n	800399a <HAL_UART_IRQHandler+0x51e>
 800397c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f8fa 	bl	8003b82 <UART_EndTransmit_IT>
    return;
 800398e:	e004      	b.n	800399a <HAL_UART_IRQHandler+0x51e>
    return;
 8003990:	bf00      	nop
 8003992:	e002      	b.n	800399a <HAL_UART_IRQHandler+0x51e>
      return;
 8003994:	bf00      	nop
 8003996:	e000      	b.n	800399a <HAL_UART_IRQHandler+0x51e>
      return;
 8003998:	bf00      	nop
  }
}
 800399a:	37e8      	adds	r7, #232	; 0xe8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b095      	sub	sp, #84	; 0x54
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	330c      	adds	r3, #12
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	330c      	adds	r3, #12
 8003a1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a1c:	643a      	str	r2, [r7, #64]	; 0x40
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a24:	e841 2300 	strex	r3, r2, [r1]
 8003a28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e5      	bne.n	80039fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3314      	adds	r3, #20
 8003a36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3314      	adds	r3, #20
 8003a4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e5      	bne.n	8003a30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d119      	bne.n	8003aa0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f023 0310 	bic.w	r3, r3, #16
 8003a82:	647b      	str	r3, [r7, #68]	; 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a8c:	61ba      	str	r2, [r7, #24]
 8003a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	6979      	ldr	r1, [r7, #20]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	613b      	str	r3, [r7, #16]
   return(result);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e5      	bne.n	8003a6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003aae:	bf00      	nop
 8003ab0:	3754      	adds	r7, #84	; 0x54
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7ff ff77 	bl	80039c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ada:	bf00      	nop
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b21      	cmp	r3, #33	; 0x21
 8003af4:	d13e      	bne.n	8003b74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afe:	d114      	bne.n	8003b2a <UART_Transmit_IT+0x48>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d110      	bne.n	8003b2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	1c9a      	adds	r2, r3, #2
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	621a      	str	r2, [r3, #32]
 8003b28:	e008      	b.n	8003b3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6211      	str	r1, [r2, #32]
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10f      	bne.n	8003b70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fefc 	bl	80039a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b08c      	sub	sp, #48	; 0x30
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b22      	cmp	r3, #34	; 0x22
 8003bc4:	f040 80ae 	bne.w	8003d24 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd0:	d117      	bne.n	8003c02 <UART_Receive_IT+0x50>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d113      	bne.n	8003c02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	1c9a      	adds	r2, r3, #2
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8003c00:	e026      	b.n	8003c50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c14:	d007      	beq.n	8003c26 <UART_Receive_IT+0x74>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <UART_Receive_IT+0x82>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	e008      	b.n	8003c46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d15d      	bne.n	8003d20 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0220 	bic.w	r2, r2, #32
 8003c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d135      	bne.n	8003d16 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	e853 3f00 	ldrex	r3, [r3]
 8003cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f023 0310 	bic.w	r3, r3, #16
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	623a      	str	r2, [r7, #32]
 8003cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	69f9      	ldr	r1, [r7, #28]
 8003cd6:	6a3a      	ldr	r2, [r7, #32]
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e5      	bne.n	8003cb0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d10a      	bne.n	8003d08 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff fe64 	bl	80039dc <HAL_UARTEx_RxEventCallback>
 8003d14:	e002      	b.n	8003d1c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fe4c 	bl	80039b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e002      	b.n	8003d26 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	e000      	b.n	8003d26 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d24:	2302      	movs	r3, #2
  }
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3730      	adds	r7, #48	; 0x30
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d34:	b0c0      	sub	sp, #256	; 0x100
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d4c:	68d9      	ldr	r1, [r3, #12]
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	ea40 0301 	orr.w	r3, r0, r1
 8003d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d88:	f021 010c 	bic.w	r1, r1, #12
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d96:	430b      	orrs	r3, r1
 8003d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003daa:	6999      	ldr	r1, [r3, #24]
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	ea40 0301 	orr.w	r3, r0, r1
 8003db6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b8f      	ldr	r3, [pc, #572]	; (8003ffc <UART_SetConfig+0x2cc>)
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d005      	beq.n	8003dd0 <UART_SetConfig+0xa0>
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b8d      	ldr	r3, [pc, #564]	; (8004000 <UART_SetConfig+0x2d0>)
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d104      	bne.n	8003dda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd0:	f7ff faf0 	bl	80033b4 <HAL_RCC_GetPCLK2Freq>
 8003dd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003dd8:	e003      	b.n	8003de2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dda:	f7ff fad7 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8003dde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dec:	f040 810c 	bne.w	8004008 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e02:	4622      	mov	r2, r4
 8003e04:	462b      	mov	r3, r5
 8003e06:	1891      	adds	r1, r2, r2
 8003e08:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e0a:	415b      	adcs	r3, r3
 8003e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e12:	4621      	mov	r1, r4
 8003e14:	eb12 0801 	adds.w	r8, r2, r1
 8003e18:	4629      	mov	r1, r5
 8003e1a:	eb43 0901 	adc.w	r9, r3, r1
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e32:	4690      	mov	r8, r2
 8003e34:	4699      	mov	r9, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	eb18 0303 	adds.w	r3, r8, r3
 8003e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e40:	462b      	mov	r3, r5
 8003e42:	eb49 0303 	adc.w	r3, r9, r3
 8003e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e5e:	460b      	mov	r3, r1
 8003e60:	18db      	adds	r3, r3, r3
 8003e62:	653b      	str	r3, [r7, #80]	; 0x50
 8003e64:	4613      	mov	r3, r2
 8003e66:	eb42 0303 	adc.w	r3, r2, r3
 8003e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e74:	f7fc fd12 	bl	800089c <__aeabi_uldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4b61      	ldr	r3, [pc, #388]	; (8004004 <UART_SetConfig+0x2d4>)
 8003e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	011c      	lsls	r4, r3, #4
 8003e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e98:	4642      	mov	r2, r8
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	1891      	adds	r1, r2, r2
 8003e9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ea0:	415b      	adcs	r3, r3
 8003ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ea8:	4641      	mov	r1, r8
 8003eaa:	eb12 0a01 	adds.w	sl, r2, r1
 8003eae:	4649      	mov	r1, r9
 8003eb0:	eb43 0b01 	adc.w	fp, r3, r1
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ec0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec8:	4692      	mov	sl, r2
 8003eca:	469b      	mov	fp, r3
 8003ecc:	4643      	mov	r3, r8
 8003ece:	eb1a 0303 	adds.w	r3, sl, r3
 8003ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8003edc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ef0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	18db      	adds	r3, r3, r3
 8003ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8003efa:	4613      	mov	r3, r2
 8003efc:	eb42 0303 	adc.w	r3, r2, r3
 8003f00:	647b      	str	r3, [r7, #68]	; 0x44
 8003f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f0a:	f7fc fcc7 	bl	800089c <__aeabi_uldivmod>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <UART_SetConfig+0x2d4>)
 8003f16:	fba3 2301 	umull	r2, r3, r3, r1
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2264      	movs	r2, #100	; 0x64
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	1acb      	subs	r3, r1, r3
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f2a:	4b36      	ldr	r3, [pc, #216]	; (8004004 <UART_SetConfig+0x2d4>)
 8003f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f38:	441c      	add	r4, r3
 8003f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	1891      	adds	r1, r2, r2
 8003f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f54:	415b      	adcs	r3, r3
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	1851      	adds	r1, r2, r1
 8003f60:	6339      	str	r1, [r7, #48]	; 0x30
 8003f62:	4649      	mov	r1, r9
 8003f64:	414b      	adcs	r3, r1
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f74:	4659      	mov	r1, fp
 8003f76:	00cb      	lsls	r3, r1, #3
 8003f78:	4651      	mov	r1, sl
 8003f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f7e:	4651      	mov	r1, sl
 8003f80:	00ca      	lsls	r2, r1, #3
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	4642      	mov	r2, r8
 8003f8a:	189b      	adds	r3, r3, r2
 8003f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f90:	464b      	mov	r3, r9
 8003f92:	460a      	mov	r2, r1
 8003f94:	eb42 0303 	adc.w	r3, r2, r3
 8003f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	18db      	adds	r3, r3, r3
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	eb42 0303 	adc.w	r3, r2, r3
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003fc6:	f7fc fc69 	bl	800089c <__aeabi_uldivmod>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <UART_SetConfig+0x2d4>)
 8003fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	2164      	movs	r1, #100	; 0x64
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	3332      	adds	r3, #50	; 0x32
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <UART_SetConfig+0x2d4>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	f003 0207 	and.w	r2, r3, #7
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4422      	add	r2, r4
 8003ff6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ff8:	e106      	b.n	8004208 <UART_SetConfig+0x4d8>
 8003ffa:	bf00      	nop
 8003ffc:	40011000 	.word	0x40011000
 8004000:	40011400 	.word	0x40011400
 8004004:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800400c:	2200      	movs	r2, #0
 800400e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004012:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800401a:	4642      	mov	r2, r8
 800401c:	464b      	mov	r3, r9
 800401e:	1891      	adds	r1, r2, r2
 8004020:	6239      	str	r1, [r7, #32]
 8004022:	415b      	adcs	r3, r3
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
 8004026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800402a:	4641      	mov	r1, r8
 800402c:	1854      	adds	r4, r2, r1
 800402e:	4649      	mov	r1, r9
 8004030:	eb43 0501 	adc.w	r5, r3, r1
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	00eb      	lsls	r3, r5, #3
 800403e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004042:	00e2      	lsls	r2, r4, #3
 8004044:	4614      	mov	r4, r2
 8004046:	461d      	mov	r5, r3
 8004048:	4643      	mov	r3, r8
 800404a:	18e3      	adds	r3, r4, r3
 800404c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004050:	464b      	mov	r3, r9
 8004052:	eb45 0303 	adc.w	r3, r5, r3
 8004056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004076:	4629      	mov	r1, r5
 8004078:	008b      	lsls	r3, r1, #2
 800407a:	4621      	mov	r1, r4
 800407c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004080:	4621      	mov	r1, r4
 8004082:	008a      	lsls	r2, r1, #2
 8004084:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004088:	f7fc fc08 	bl	800089c <__aeabi_uldivmod>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4b60      	ldr	r3, [pc, #384]	; (8004214 <UART_SetConfig+0x4e4>)
 8004092:	fba3 2302 	umull	r2, r3, r3, r2
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	011c      	lsls	r4, r3, #4
 800409a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040ac:	4642      	mov	r2, r8
 80040ae:	464b      	mov	r3, r9
 80040b0:	1891      	adds	r1, r2, r2
 80040b2:	61b9      	str	r1, [r7, #24]
 80040b4:	415b      	adcs	r3, r3
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040bc:	4641      	mov	r1, r8
 80040be:	1851      	adds	r1, r2, r1
 80040c0:	6139      	str	r1, [r7, #16]
 80040c2:	4649      	mov	r1, r9
 80040c4:	414b      	adcs	r3, r1
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040d4:	4659      	mov	r1, fp
 80040d6:	00cb      	lsls	r3, r1, #3
 80040d8:	4651      	mov	r1, sl
 80040da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040de:	4651      	mov	r1, sl
 80040e0:	00ca      	lsls	r2, r1, #3
 80040e2:	4610      	mov	r0, r2
 80040e4:	4619      	mov	r1, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	4642      	mov	r2, r8
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040f0:	464b      	mov	r3, r9
 80040f2:	460a      	mov	r2, r1
 80040f4:	eb42 0303 	adc.w	r3, r2, r3
 80040f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	67bb      	str	r3, [r7, #120]	; 0x78
 8004106:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004114:	4649      	mov	r1, r9
 8004116:	008b      	lsls	r3, r1, #2
 8004118:	4641      	mov	r1, r8
 800411a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800411e:	4641      	mov	r1, r8
 8004120:	008a      	lsls	r2, r1, #2
 8004122:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004126:	f7fc fbb9 	bl	800089c <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4611      	mov	r1, r2
 8004130:	4b38      	ldr	r3, [pc, #224]	; (8004214 <UART_SetConfig+0x4e4>)
 8004132:	fba3 2301 	umull	r2, r3, r3, r1
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2264      	movs	r2, #100	; 0x64
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	1acb      	subs	r3, r1, r3
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	3332      	adds	r3, #50	; 0x32
 8004144:	4a33      	ldr	r2, [pc, #204]	; (8004214 <UART_SetConfig+0x4e4>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004150:	441c      	add	r4, r3
 8004152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004156:	2200      	movs	r2, #0
 8004158:	673b      	str	r3, [r7, #112]	; 0x70
 800415a:	677a      	str	r2, [r7, #116]	; 0x74
 800415c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	1891      	adds	r1, r2, r2
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	415b      	adcs	r3, r3
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004170:	4641      	mov	r1, r8
 8004172:	1851      	adds	r1, r2, r1
 8004174:	6039      	str	r1, [r7, #0]
 8004176:	4649      	mov	r1, r9
 8004178:	414b      	adcs	r3, r1
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004188:	4659      	mov	r1, fp
 800418a:	00cb      	lsls	r3, r1, #3
 800418c:	4651      	mov	r1, sl
 800418e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004192:	4651      	mov	r1, sl
 8004194:	00ca      	lsls	r2, r1, #3
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	4603      	mov	r3, r0
 800419c:	4642      	mov	r2, r8
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80041a2:	464b      	mov	r3, r9
 80041a4:	460a      	mov	r2, r1
 80041a6:	eb42 0303 	adc.w	r3, r2, r3
 80041aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	663b      	str	r3, [r7, #96]	; 0x60
 80041b6:	667a      	str	r2, [r7, #100]	; 0x64
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041c4:	4649      	mov	r1, r9
 80041c6:	008b      	lsls	r3, r1, #2
 80041c8:	4641      	mov	r1, r8
 80041ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ce:	4641      	mov	r1, r8
 80041d0:	008a      	lsls	r2, r1, #2
 80041d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041d6:	f7fc fb61 	bl	800089c <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <UART_SetConfig+0x4e4>)
 80041e0:	fba3 1302 	umull	r1, r3, r3, r2
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	2164      	movs	r1, #100	; 0x64
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	3332      	adds	r3, #50	; 0x32
 80041f2:	4a08      	ldr	r2, [pc, #32]	; (8004214 <UART_SetConfig+0x4e4>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	f003 020f 	and.w	r2, r3, #15
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4422      	add	r2, r4
 8004206:	609a      	str	r2, [r3, #8]
}
 8004208:	bf00      	nop
 800420a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800420e:	46bd      	mov	sp, r7
 8004210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004214:	51eb851f 	.word	0x51eb851f

08004218 <siprintf>:
 8004218:	b40e      	push	{r1, r2, r3}
 800421a:	b500      	push	{lr}
 800421c:	b09c      	sub	sp, #112	; 0x70
 800421e:	ab1d      	add	r3, sp, #116	; 0x74
 8004220:	9002      	str	r0, [sp, #8]
 8004222:	9006      	str	r0, [sp, #24]
 8004224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004228:	4809      	ldr	r0, [pc, #36]	; (8004250 <siprintf+0x38>)
 800422a:	9107      	str	r1, [sp, #28]
 800422c:	9104      	str	r1, [sp, #16]
 800422e:	4909      	ldr	r1, [pc, #36]	; (8004254 <siprintf+0x3c>)
 8004230:	f853 2b04 	ldr.w	r2, [r3], #4
 8004234:	9105      	str	r1, [sp, #20]
 8004236:	6800      	ldr	r0, [r0, #0]
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	a902      	add	r1, sp, #8
 800423c:	f000 f992 	bl	8004564 <_svfiprintf_r>
 8004240:	9b02      	ldr	r3, [sp, #8]
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	b01c      	add	sp, #112	; 0x70
 8004248:	f85d eb04 	ldr.w	lr, [sp], #4
 800424c:	b003      	add	sp, #12
 800424e:	4770      	bx	lr
 8004250:	20000068 	.word	0x20000068
 8004254:	ffff0208 	.word	0xffff0208

08004258 <memset>:
 8004258:	4402      	add	r2, r0
 800425a:	4603      	mov	r3, r0
 800425c:	4293      	cmp	r3, r2
 800425e:	d100      	bne.n	8004262 <memset+0xa>
 8004260:	4770      	bx	lr
 8004262:	f803 1b01 	strb.w	r1, [r3], #1
 8004266:	e7f9      	b.n	800425c <memset+0x4>

08004268 <__errno>:
 8004268:	4b01      	ldr	r3, [pc, #4]	; (8004270 <__errno+0x8>)
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000068 	.word	0x20000068

08004274 <__libc_init_array>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	4d0d      	ldr	r5, [pc, #52]	; (80042ac <__libc_init_array+0x38>)
 8004278:	4c0d      	ldr	r4, [pc, #52]	; (80042b0 <__libc_init_array+0x3c>)
 800427a:	1b64      	subs	r4, r4, r5
 800427c:	10a4      	asrs	r4, r4, #2
 800427e:	2600      	movs	r6, #0
 8004280:	42a6      	cmp	r6, r4
 8004282:	d109      	bne.n	8004298 <__libc_init_array+0x24>
 8004284:	4d0b      	ldr	r5, [pc, #44]	; (80042b4 <__libc_init_array+0x40>)
 8004286:	4c0c      	ldr	r4, [pc, #48]	; (80042b8 <__libc_init_array+0x44>)
 8004288:	f000 fc6a 	bl	8004b60 <_init>
 800428c:	1b64      	subs	r4, r4, r5
 800428e:	10a4      	asrs	r4, r4, #2
 8004290:	2600      	movs	r6, #0
 8004292:	42a6      	cmp	r6, r4
 8004294:	d105      	bne.n	80042a2 <__libc_init_array+0x2e>
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	f855 3b04 	ldr.w	r3, [r5], #4
 800429c:	4798      	blx	r3
 800429e:	3601      	adds	r6, #1
 80042a0:	e7ee      	b.n	8004280 <__libc_init_array+0xc>
 80042a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a6:	4798      	blx	r3
 80042a8:	3601      	adds	r6, #1
 80042aa:	e7f2      	b.n	8004292 <__libc_init_array+0x1e>
 80042ac:	08004c1c 	.word	0x08004c1c
 80042b0:	08004c1c 	.word	0x08004c1c
 80042b4:	08004c1c 	.word	0x08004c1c
 80042b8:	08004c20 	.word	0x08004c20

080042bc <__retarget_lock_acquire_recursive>:
 80042bc:	4770      	bx	lr

080042be <__retarget_lock_release_recursive>:
 80042be:	4770      	bx	lr

080042c0 <_free_r>:
 80042c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042c2:	2900      	cmp	r1, #0
 80042c4:	d044      	beq.n	8004350 <_free_r+0x90>
 80042c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ca:	9001      	str	r0, [sp, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f1a1 0404 	sub.w	r4, r1, #4
 80042d2:	bfb8      	it	lt
 80042d4:	18e4      	addlt	r4, r4, r3
 80042d6:	f000 f8df 	bl	8004498 <__malloc_lock>
 80042da:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <_free_r+0x94>)
 80042dc:	9801      	ldr	r0, [sp, #4]
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	b933      	cbnz	r3, 80042f0 <_free_r+0x30>
 80042e2:	6063      	str	r3, [r4, #4]
 80042e4:	6014      	str	r4, [r2, #0]
 80042e6:	b003      	add	sp, #12
 80042e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042ec:	f000 b8da 	b.w	80044a4 <__malloc_unlock>
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	d908      	bls.n	8004306 <_free_r+0x46>
 80042f4:	6825      	ldr	r5, [r4, #0]
 80042f6:	1961      	adds	r1, r4, r5
 80042f8:	428b      	cmp	r3, r1
 80042fa:	bf01      	itttt	eq
 80042fc:	6819      	ldreq	r1, [r3, #0]
 80042fe:	685b      	ldreq	r3, [r3, #4]
 8004300:	1949      	addeq	r1, r1, r5
 8004302:	6021      	streq	r1, [r4, #0]
 8004304:	e7ed      	b.n	80042e2 <_free_r+0x22>
 8004306:	461a      	mov	r2, r3
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	b10b      	cbz	r3, 8004310 <_free_r+0x50>
 800430c:	42a3      	cmp	r3, r4
 800430e:	d9fa      	bls.n	8004306 <_free_r+0x46>
 8004310:	6811      	ldr	r1, [r2, #0]
 8004312:	1855      	adds	r5, r2, r1
 8004314:	42a5      	cmp	r5, r4
 8004316:	d10b      	bne.n	8004330 <_free_r+0x70>
 8004318:	6824      	ldr	r4, [r4, #0]
 800431a:	4421      	add	r1, r4
 800431c:	1854      	adds	r4, r2, r1
 800431e:	42a3      	cmp	r3, r4
 8004320:	6011      	str	r1, [r2, #0]
 8004322:	d1e0      	bne.n	80042e6 <_free_r+0x26>
 8004324:	681c      	ldr	r4, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	6053      	str	r3, [r2, #4]
 800432a:	440c      	add	r4, r1
 800432c:	6014      	str	r4, [r2, #0]
 800432e:	e7da      	b.n	80042e6 <_free_r+0x26>
 8004330:	d902      	bls.n	8004338 <_free_r+0x78>
 8004332:	230c      	movs	r3, #12
 8004334:	6003      	str	r3, [r0, #0]
 8004336:	e7d6      	b.n	80042e6 <_free_r+0x26>
 8004338:	6825      	ldr	r5, [r4, #0]
 800433a:	1961      	adds	r1, r4, r5
 800433c:	428b      	cmp	r3, r1
 800433e:	bf04      	itt	eq
 8004340:	6819      	ldreq	r1, [r3, #0]
 8004342:	685b      	ldreq	r3, [r3, #4]
 8004344:	6063      	str	r3, [r4, #4]
 8004346:	bf04      	itt	eq
 8004348:	1949      	addeq	r1, r1, r5
 800434a:	6021      	streq	r1, [r4, #0]
 800434c:	6054      	str	r4, [r2, #4]
 800434e:	e7ca      	b.n	80042e6 <_free_r+0x26>
 8004350:	b003      	add	sp, #12
 8004352:	bd30      	pop	{r4, r5, pc}
 8004354:	2000028c 	.word	0x2000028c

08004358 <sbrk_aligned>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4e0e      	ldr	r6, [pc, #56]	; (8004394 <sbrk_aligned+0x3c>)
 800435c:	460c      	mov	r4, r1
 800435e:	6831      	ldr	r1, [r6, #0]
 8004360:	4605      	mov	r5, r0
 8004362:	b911      	cbnz	r1, 800436a <sbrk_aligned+0x12>
 8004364:	f000 fba6 	bl	8004ab4 <_sbrk_r>
 8004368:	6030      	str	r0, [r6, #0]
 800436a:	4621      	mov	r1, r4
 800436c:	4628      	mov	r0, r5
 800436e:	f000 fba1 	bl	8004ab4 <_sbrk_r>
 8004372:	1c43      	adds	r3, r0, #1
 8004374:	d00a      	beq.n	800438c <sbrk_aligned+0x34>
 8004376:	1cc4      	adds	r4, r0, #3
 8004378:	f024 0403 	bic.w	r4, r4, #3
 800437c:	42a0      	cmp	r0, r4
 800437e:	d007      	beq.n	8004390 <sbrk_aligned+0x38>
 8004380:	1a21      	subs	r1, r4, r0
 8004382:	4628      	mov	r0, r5
 8004384:	f000 fb96 	bl	8004ab4 <_sbrk_r>
 8004388:	3001      	adds	r0, #1
 800438a:	d101      	bne.n	8004390 <sbrk_aligned+0x38>
 800438c:	f04f 34ff 	mov.w	r4, #4294967295
 8004390:	4620      	mov	r0, r4
 8004392:	bd70      	pop	{r4, r5, r6, pc}
 8004394:	20000290 	.word	0x20000290

08004398 <_malloc_r>:
 8004398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800439c:	1ccd      	adds	r5, r1, #3
 800439e:	f025 0503 	bic.w	r5, r5, #3
 80043a2:	3508      	adds	r5, #8
 80043a4:	2d0c      	cmp	r5, #12
 80043a6:	bf38      	it	cc
 80043a8:	250c      	movcc	r5, #12
 80043aa:	2d00      	cmp	r5, #0
 80043ac:	4607      	mov	r7, r0
 80043ae:	db01      	blt.n	80043b4 <_malloc_r+0x1c>
 80043b0:	42a9      	cmp	r1, r5
 80043b2:	d905      	bls.n	80043c0 <_malloc_r+0x28>
 80043b4:	230c      	movs	r3, #12
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	2600      	movs	r6, #0
 80043ba:	4630      	mov	r0, r6
 80043bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004494 <_malloc_r+0xfc>
 80043c4:	f000 f868 	bl	8004498 <__malloc_lock>
 80043c8:	f8d8 3000 	ldr.w	r3, [r8]
 80043cc:	461c      	mov	r4, r3
 80043ce:	bb5c      	cbnz	r4, 8004428 <_malloc_r+0x90>
 80043d0:	4629      	mov	r1, r5
 80043d2:	4638      	mov	r0, r7
 80043d4:	f7ff ffc0 	bl	8004358 <sbrk_aligned>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	4604      	mov	r4, r0
 80043dc:	d155      	bne.n	800448a <_malloc_r+0xf2>
 80043de:	f8d8 4000 	ldr.w	r4, [r8]
 80043e2:	4626      	mov	r6, r4
 80043e4:	2e00      	cmp	r6, #0
 80043e6:	d145      	bne.n	8004474 <_malloc_r+0xdc>
 80043e8:	2c00      	cmp	r4, #0
 80043ea:	d048      	beq.n	800447e <_malloc_r+0xe6>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	4631      	mov	r1, r6
 80043f0:	4638      	mov	r0, r7
 80043f2:	eb04 0903 	add.w	r9, r4, r3
 80043f6:	f000 fb5d 	bl	8004ab4 <_sbrk_r>
 80043fa:	4581      	cmp	r9, r0
 80043fc:	d13f      	bne.n	800447e <_malloc_r+0xe6>
 80043fe:	6821      	ldr	r1, [r4, #0]
 8004400:	1a6d      	subs	r5, r5, r1
 8004402:	4629      	mov	r1, r5
 8004404:	4638      	mov	r0, r7
 8004406:	f7ff ffa7 	bl	8004358 <sbrk_aligned>
 800440a:	3001      	adds	r0, #1
 800440c:	d037      	beq.n	800447e <_malloc_r+0xe6>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	442b      	add	r3, r5
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	f8d8 3000 	ldr.w	r3, [r8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d038      	beq.n	800448e <_malloc_r+0xf6>
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	42a2      	cmp	r2, r4
 8004420:	d12b      	bne.n	800447a <_malloc_r+0xe2>
 8004422:	2200      	movs	r2, #0
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	e00f      	b.n	8004448 <_malloc_r+0xb0>
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	1b52      	subs	r2, r2, r5
 800442c:	d41f      	bmi.n	800446e <_malloc_r+0xd6>
 800442e:	2a0b      	cmp	r2, #11
 8004430:	d917      	bls.n	8004462 <_malloc_r+0xca>
 8004432:	1961      	adds	r1, r4, r5
 8004434:	42a3      	cmp	r3, r4
 8004436:	6025      	str	r5, [r4, #0]
 8004438:	bf18      	it	ne
 800443a:	6059      	strne	r1, [r3, #4]
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	bf08      	it	eq
 8004440:	f8c8 1000 	streq.w	r1, [r8]
 8004444:	5162      	str	r2, [r4, r5]
 8004446:	604b      	str	r3, [r1, #4]
 8004448:	4638      	mov	r0, r7
 800444a:	f104 060b 	add.w	r6, r4, #11
 800444e:	f000 f829 	bl	80044a4 <__malloc_unlock>
 8004452:	f026 0607 	bic.w	r6, r6, #7
 8004456:	1d23      	adds	r3, r4, #4
 8004458:	1af2      	subs	r2, r6, r3
 800445a:	d0ae      	beq.n	80043ba <_malloc_r+0x22>
 800445c:	1b9b      	subs	r3, r3, r6
 800445e:	50a3      	str	r3, [r4, r2]
 8004460:	e7ab      	b.n	80043ba <_malloc_r+0x22>
 8004462:	42a3      	cmp	r3, r4
 8004464:	6862      	ldr	r2, [r4, #4]
 8004466:	d1dd      	bne.n	8004424 <_malloc_r+0x8c>
 8004468:	f8c8 2000 	str.w	r2, [r8]
 800446c:	e7ec      	b.n	8004448 <_malloc_r+0xb0>
 800446e:	4623      	mov	r3, r4
 8004470:	6864      	ldr	r4, [r4, #4]
 8004472:	e7ac      	b.n	80043ce <_malloc_r+0x36>
 8004474:	4634      	mov	r4, r6
 8004476:	6876      	ldr	r6, [r6, #4]
 8004478:	e7b4      	b.n	80043e4 <_malloc_r+0x4c>
 800447a:	4613      	mov	r3, r2
 800447c:	e7cc      	b.n	8004418 <_malloc_r+0x80>
 800447e:	230c      	movs	r3, #12
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	4638      	mov	r0, r7
 8004484:	f000 f80e 	bl	80044a4 <__malloc_unlock>
 8004488:	e797      	b.n	80043ba <_malloc_r+0x22>
 800448a:	6025      	str	r5, [r4, #0]
 800448c:	e7dc      	b.n	8004448 <_malloc_r+0xb0>
 800448e:	605b      	str	r3, [r3, #4]
 8004490:	deff      	udf	#255	; 0xff
 8004492:	bf00      	nop
 8004494:	2000028c 	.word	0x2000028c

08004498 <__malloc_lock>:
 8004498:	4801      	ldr	r0, [pc, #4]	; (80044a0 <__malloc_lock+0x8>)
 800449a:	f7ff bf0f 	b.w	80042bc <__retarget_lock_acquire_recursive>
 800449e:	bf00      	nop
 80044a0:	20000288 	.word	0x20000288

080044a4 <__malloc_unlock>:
 80044a4:	4801      	ldr	r0, [pc, #4]	; (80044ac <__malloc_unlock+0x8>)
 80044a6:	f7ff bf0a 	b.w	80042be <__retarget_lock_release_recursive>
 80044aa:	bf00      	nop
 80044ac:	20000288 	.word	0x20000288

080044b0 <__ssputs_r>:
 80044b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b4:	688e      	ldr	r6, [r1, #8]
 80044b6:	461f      	mov	r7, r3
 80044b8:	42be      	cmp	r6, r7
 80044ba:	680b      	ldr	r3, [r1, #0]
 80044bc:	4682      	mov	sl, r0
 80044be:	460c      	mov	r4, r1
 80044c0:	4690      	mov	r8, r2
 80044c2:	d82c      	bhi.n	800451e <__ssputs_r+0x6e>
 80044c4:	898a      	ldrh	r2, [r1, #12]
 80044c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044ca:	d026      	beq.n	800451a <__ssputs_r+0x6a>
 80044cc:	6965      	ldr	r5, [r4, #20]
 80044ce:	6909      	ldr	r1, [r1, #16]
 80044d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044d4:	eba3 0901 	sub.w	r9, r3, r1
 80044d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044dc:	1c7b      	adds	r3, r7, #1
 80044de:	444b      	add	r3, r9
 80044e0:	106d      	asrs	r5, r5, #1
 80044e2:	429d      	cmp	r5, r3
 80044e4:	bf38      	it	cc
 80044e6:	461d      	movcc	r5, r3
 80044e8:	0553      	lsls	r3, r2, #21
 80044ea:	d527      	bpl.n	800453c <__ssputs_r+0x8c>
 80044ec:	4629      	mov	r1, r5
 80044ee:	f7ff ff53 	bl	8004398 <_malloc_r>
 80044f2:	4606      	mov	r6, r0
 80044f4:	b360      	cbz	r0, 8004550 <__ssputs_r+0xa0>
 80044f6:	6921      	ldr	r1, [r4, #16]
 80044f8:	464a      	mov	r2, r9
 80044fa:	f000 faeb 	bl	8004ad4 <memcpy>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	6126      	str	r6, [r4, #16]
 800450c:	6165      	str	r5, [r4, #20]
 800450e:	444e      	add	r6, r9
 8004510:	eba5 0509 	sub.w	r5, r5, r9
 8004514:	6026      	str	r6, [r4, #0]
 8004516:	60a5      	str	r5, [r4, #8]
 8004518:	463e      	mov	r6, r7
 800451a:	42be      	cmp	r6, r7
 800451c:	d900      	bls.n	8004520 <__ssputs_r+0x70>
 800451e:	463e      	mov	r6, r7
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	4632      	mov	r2, r6
 8004524:	4641      	mov	r1, r8
 8004526:	f000 faab 	bl	8004a80 <memmove>
 800452a:	68a3      	ldr	r3, [r4, #8]
 800452c:	1b9b      	subs	r3, r3, r6
 800452e:	60a3      	str	r3, [r4, #8]
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	4433      	add	r3, r6
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	2000      	movs	r0, #0
 8004538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453c:	462a      	mov	r2, r5
 800453e:	f000 fad7 	bl	8004af0 <_realloc_r>
 8004542:	4606      	mov	r6, r0
 8004544:	2800      	cmp	r0, #0
 8004546:	d1e0      	bne.n	800450a <__ssputs_r+0x5a>
 8004548:	6921      	ldr	r1, [r4, #16]
 800454a:	4650      	mov	r0, sl
 800454c:	f7ff feb8 	bl	80042c0 <_free_r>
 8004550:	230c      	movs	r3, #12
 8004552:	f8ca 3000 	str.w	r3, [sl]
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	f04f 30ff 	mov.w	r0, #4294967295
 8004562:	e7e9      	b.n	8004538 <__ssputs_r+0x88>

08004564 <_svfiprintf_r>:
 8004564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004568:	4698      	mov	r8, r3
 800456a:	898b      	ldrh	r3, [r1, #12]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	b09d      	sub	sp, #116	; 0x74
 8004570:	4607      	mov	r7, r0
 8004572:	460d      	mov	r5, r1
 8004574:	4614      	mov	r4, r2
 8004576:	d50e      	bpl.n	8004596 <_svfiprintf_r+0x32>
 8004578:	690b      	ldr	r3, [r1, #16]
 800457a:	b963      	cbnz	r3, 8004596 <_svfiprintf_r+0x32>
 800457c:	2140      	movs	r1, #64	; 0x40
 800457e:	f7ff ff0b 	bl	8004398 <_malloc_r>
 8004582:	6028      	str	r0, [r5, #0]
 8004584:	6128      	str	r0, [r5, #16]
 8004586:	b920      	cbnz	r0, 8004592 <_svfiprintf_r+0x2e>
 8004588:	230c      	movs	r3, #12
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	e0d0      	b.n	8004734 <_svfiprintf_r+0x1d0>
 8004592:	2340      	movs	r3, #64	; 0x40
 8004594:	616b      	str	r3, [r5, #20]
 8004596:	2300      	movs	r3, #0
 8004598:	9309      	str	r3, [sp, #36]	; 0x24
 800459a:	2320      	movs	r3, #32
 800459c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80045a4:	2330      	movs	r3, #48	; 0x30
 80045a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800474c <_svfiprintf_r+0x1e8>
 80045aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045ae:	f04f 0901 	mov.w	r9, #1
 80045b2:	4623      	mov	r3, r4
 80045b4:	469a      	mov	sl, r3
 80045b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ba:	b10a      	cbz	r2, 80045c0 <_svfiprintf_r+0x5c>
 80045bc:	2a25      	cmp	r2, #37	; 0x25
 80045be:	d1f9      	bne.n	80045b4 <_svfiprintf_r+0x50>
 80045c0:	ebba 0b04 	subs.w	fp, sl, r4
 80045c4:	d00b      	beq.n	80045de <_svfiprintf_r+0x7a>
 80045c6:	465b      	mov	r3, fp
 80045c8:	4622      	mov	r2, r4
 80045ca:	4629      	mov	r1, r5
 80045cc:	4638      	mov	r0, r7
 80045ce:	f7ff ff6f 	bl	80044b0 <__ssputs_r>
 80045d2:	3001      	adds	r0, #1
 80045d4:	f000 80a9 	beq.w	800472a <_svfiprintf_r+0x1c6>
 80045d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045da:	445a      	add	r2, fp
 80045dc:	9209      	str	r2, [sp, #36]	; 0x24
 80045de:	f89a 3000 	ldrb.w	r3, [sl]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80a1 	beq.w	800472a <_svfiprintf_r+0x1c6>
 80045e8:	2300      	movs	r3, #0
 80045ea:	f04f 32ff 	mov.w	r2, #4294967295
 80045ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045f2:	f10a 0a01 	add.w	sl, sl, #1
 80045f6:	9304      	str	r3, [sp, #16]
 80045f8:	9307      	str	r3, [sp, #28]
 80045fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004600:	4654      	mov	r4, sl
 8004602:	2205      	movs	r2, #5
 8004604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004608:	4850      	ldr	r0, [pc, #320]	; (800474c <_svfiprintf_r+0x1e8>)
 800460a:	f7fb fde9 	bl	80001e0 <memchr>
 800460e:	9a04      	ldr	r2, [sp, #16]
 8004610:	b9d8      	cbnz	r0, 800464a <_svfiprintf_r+0xe6>
 8004612:	06d0      	lsls	r0, r2, #27
 8004614:	bf44      	itt	mi
 8004616:	2320      	movmi	r3, #32
 8004618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800461c:	0711      	lsls	r1, r2, #28
 800461e:	bf44      	itt	mi
 8004620:	232b      	movmi	r3, #43	; 0x2b
 8004622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004626:	f89a 3000 	ldrb.w	r3, [sl]
 800462a:	2b2a      	cmp	r3, #42	; 0x2a
 800462c:	d015      	beq.n	800465a <_svfiprintf_r+0xf6>
 800462e:	9a07      	ldr	r2, [sp, #28]
 8004630:	4654      	mov	r4, sl
 8004632:	2000      	movs	r0, #0
 8004634:	f04f 0c0a 	mov.w	ip, #10
 8004638:	4621      	mov	r1, r4
 800463a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800463e:	3b30      	subs	r3, #48	; 0x30
 8004640:	2b09      	cmp	r3, #9
 8004642:	d94d      	bls.n	80046e0 <_svfiprintf_r+0x17c>
 8004644:	b1b0      	cbz	r0, 8004674 <_svfiprintf_r+0x110>
 8004646:	9207      	str	r2, [sp, #28]
 8004648:	e014      	b.n	8004674 <_svfiprintf_r+0x110>
 800464a:	eba0 0308 	sub.w	r3, r0, r8
 800464e:	fa09 f303 	lsl.w	r3, r9, r3
 8004652:	4313      	orrs	r3, r2
 8004654:	9304      	str	r3, [sp, #16]
 8004656:	46a2      	mov	sl, r4
 8004658:	e7d2      	b.n	8004600 <_svfiprintf_r+0x9c>
 800465a:	9b03      	ldr	r3, [sp, #12]
 800465c:	1d19      	adds	r1, r3, #4
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	9103      	str	r1, [sp, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	bfbb      	ittet	lt
 8004666:	425b      	neglt	r3, r3
 8004668:	f042 0202 	orrlt.w	r2, r2, #2
 800466c:	9307      	strge	r3, [sp, #28]
 800466e:	9307      	strlt	r3, [sp, #28]
 8004670:	bfb8      	it	lt
 8004672:	9204      	strlt	r2, [sp, #16]
 8004674:	7823      	ldrb	r3, [r4, #0]
 8004676:	2b2e      	cmp	r3, #46	; 0x2e
 8004678:	d10c      	bne.n	8004694 <_svfiprintf_r+0x130>
 800467a:	7863      	ldrb	r3, [r4, #1]
 800467c:	2b2a      	cmp	r3, #42	; 0x2a
 800467e:	d134      	bne.n	80046ea <_svfiprintf_r+0x186>
 8004680:	9b03      	ldr	r3, [sp, #12]
 8004682:	1d1a      	adds	r2, r3, #4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	9203      	str	r2, [sp, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	bfb8      	it	lt
 800468c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004690:	3402      	adds	r4, #2
 8004692:	9305      	str	r3, [sp, #20]
 8004694:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800475c <_svfiprintf_r+0x1f8>
 8004698:	7821      	ldrb	r1, [r4, #0]
 800469a:	2203      	movs	r2, #3
 800469c:	4650      	mov	r0, sl
 800469e:	f7fb fd9f 	bl	80001e0 <memchr>
 80046a2:	b138      	cbz	r0, 80046b4 <_svfiprintf_r+0x150>
 80046a4:	9b04      	ldr	r3, [sp, #16]
 80046a6:	eba0 000a 	sub.w	r0, r0, sl
 80046aa:	2240      	movs	r2, #64	; 0x40
 80046ac:	4082      	lsls	r2, r0
 80046ae:	4313      	orrs	r3, r2
 80046b0:	3401      	adds	r4, #1
 80046b2:	9304      	str	r3, [sp, #16]
 80046b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b8:	4825      	ldr	r0, [pc, #148]	; (8004750 <_svfiprintf_r+0x1ec>)
 80046ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046be:	2206      	movs	r2, #6
 80046c0:	f7fb fd8e 	bl	80001e0 <memchr>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d038      	beq.n	800473a <_svfiprintf_r+0x1d6>
 80046c8:	4b22      	ldr	r3, [pc, #136]	; (8004754 <_svfiprintf_r+0x1f0>)
 80046ca:	bb1b      	cbnz	r3, 8004714 <_svfiprintf_r+0x1b0>
 80046cc:	9b03      	ldr	r3, [sp, #12]
 80046ce:	3307      	adds	r3, #7
 80046d0:	f023 0307 	bic.w	r3, r3, #7
 80046d4:	3308      	adds	r3, #8
 80046d6:	9303      	str	r3, [sp, #12]
 80046d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046da:	4433      	add	r3, r6
 80046dc:	9309      	str	r3, [sp, #36]	; 0x24
 80046de:	e768      	b.n	80045b2 <_svfiprintf_r+0x4e>
 80046e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80046e4:	460c      	mov	r4, r1
 80046e6:	2001      	movs	r0, #1
 80046e8:	e7a6      	b.n	8004638 <_svfiprintf_r+0xd4>
 80046ea:	2300      	movs	r3, #0
 80046ec:	3401      	adds	r4, #1
 80046ee:	9305      	str	r3, [sp, #20]
 80046f0:	4619      	mov	r1, r3
 80046f2:	f04f 0c0a 	mov.w	ip, #10
 80046f6:	4620      	mov	r0, r4
 80046f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046fc:	3a30      	subs	r2, #48	; 0x30
 80046fe:	2a09      	cmp	r2, #9
 8004700:	d903      	bls.n	800470a <_svfiprintf_r+0x1a6>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0c6      	beq.n	8004694 <_svfiprintf_r+0x130>
 8004706:	9105      	str	r1, [sp, #20]
 8004708:	e7c4      	b.n	8004694 <_svfiprintf_r+0x130>
 800470a:	fb0c 2101 	mla	r1, ip, r1, r2
 800470e:	4604      	mov	r4, r0
 8004710:	2301      	movs	r3, #1
 8004712:	e7f0      	b.n	80046f6 <_svfiprintf_r+0x192>
 8004714:	ab03      	add	r3, sp, #12
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	462a      	mov	r2, r5
 800471a:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <_svfiprintf_r+0x1f4>)
 800471c:	a904      	add	r1, sp, #16
 800471e:	4638      	mov	r0, r7
 8004720:	f3af 8000 	nop.w
 8004724:	1c42      	adds	r2, r0, #1
 8004726:	4606      	mov	r6, r0
 8004728:	d1d6      	bne.n	80046d8 <_svfiprintf_r+0x174>
 800472a:	89ab      	ldrh	r3, [r5, #12]
 800472c:	065b      	lsls	r3, r3, #25
 800472e:	f53f af2d 	bmi.w	800458c <_svfiprintf_r+0x28>
 8004732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004734:	b01d      	add	sp, #116	; 0x74
 8004736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800473a:	ab03      	add	r3, sp, #12
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	462a      	mov	r2, r5
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <_svfiprintf_r+0x1f4>)
 8004742:	a904      	add	r1, sp, #16
 8004744:	4638      	mov	r0, r7
 8004746:	f000 f879 	bl	800483c <_printf_i>
 800474a:	e7eb      	b.n	8004724 <_svfiprintf_r+0x1c0>
 800474c:	08004be0 	.word	0x08004be0
 8004750:	08004bea 	.word	0x08004bea
 8004754:	00000000 	.word	0x00000000
 8004758:	080044b1 	.word	0x080044b1
 800475c:	08004be6 	.word	0x08004be6

08004760 <_printf_common>:
 8004760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004764:	4616      	mov	r6, r2
 8004766:	4699      	mov	r9, r3
 8004768:	688a      	ldr	r2, [r1, #8]
 800476a:	690b      	ldr	r3, [r1, #16]
 800476c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004770:	4293      	cmp	r3, r2
 8004772:	bfb8      	it	lt
 8004774:	4613      	movlt	r3, r2
 8004776:	6033      	str	r3, [r6, #0]
 8004778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800477c:	4607      	mov	r7, r0
 800477e:	460c      	mov	r4, r1
 8004780:	b10a      	cbz	r2, 8004786 <_printf_common+0x26>
 8004782:	3301      	adds	r3, #1
 8004784:	6033      	str	r3, [r6, #0]
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	0699      	lsls	r1, r3, #26
 800478a:	bf42      	ittt	mi
 800478c:	6833      	ldrmi	r3, [r6, #0]
 800478e:	3302      	addmi	r3, #2
 8004790:	6033      	strmi	r3, [r6, #0]
 8004792:	6825      	ldr	r5, [r4, #0]
 8004794:	f015 0506 	ands.w	r5, r5, #6
 8004798:	d106      	bne.n	80047a8 <_printf_common+0x48>
 800479a:	f104 0a19 	add.w	sl, r4, #25
 800479e:	68e3      	ldr	r3, [r4, #12]
 80047a0:	6832      	ldr	r2, [r6, #0]
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	42ab      	cmp	r3, r5
 80047a6:	dc26      	bgt.n	80047f6 <_printf_common+0x96>
 80047a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047ac:	1e13      	subs	r3, r2, #0
 80047ae:	6822      	ldr	r2, [r4, #0]
 80047b0:	bf18      	it	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	0692      	lsls	r2, r2, #26
 80047b6:	d42b      	bmi.n	8004810 <_printf_common+0xb0>
 80047b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047bc:	4649      	mov	r1, r9
 80047be:	4638      	mov	r0, r7
 80047c0:	47c0      	blx	r8
 80047c2:	3001      	adds	r0, #1
 80047c4:	d01e      	beq.n	8004804 <_printf_common+0xa4>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	6922      	ldr	r2, [r4, #16]
 80047ca:	f003 0306 	and.w	r3, r3, #6
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	bf02      	ittt	eq
 80047d2:	68e5      	ldreq	r5, [r4, #12]
 80047d4:	6833      	ldreq	r3, [r6, #0]
 80047d6:	1aed      	subeq	r5, r5, r3
 80047d8:	68a3      	ldr	r3, [r4, #8]
 80047da:	bf0c      	ite	eq
 80047dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047e0:	2500      	movne	r5, #0
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bfc4      	itt	gt
 80047e6:	1a9b      	subgt	r3, r3, r2
 80047e8:	18ed      	addgt	r5, r5, r3
 80047ea:	2600      	movs	r6, #0
 80047ec:	341a      	adds	r4, #26
 80047ee:	42b5      	cmp	r5, r6
 80047f0:	d11a      	bne.n	8004828 <_printf_common+0xc8>
 80047f2:	2000      	movs	r0, #0
 80047f4:	e008      	b.n	8004808 <_printf_common+0xa8>
 80047f6:	2301      	movs	r3, #1
 80047f8:	4652      	mov	r2, sl
 80047fa:	4649      	mov	r1, r9
 80047fc:	4638      	mov	r0, r7
 80047fe:	47c0      	blx	r8
 8004800:	3001      	adds	r0, #1
 8004802:	d103      	bne.n	800480c <_printf_common+0xac>
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480c:	3501      	adds	r5, #1
 800480e:	e7c6      	b.n	800479e <_printf_common+0x3e>
 8004810:	18e1      	adds	r1, r4, r3
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	2030      	movs	r0, #48	; 0x30
 8004816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800481a:	4422      	add	r2, r4
 800481c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004824:	3302      	adds	r3, #2
 8004826:	e7c7      	b.n	80047b8 <_printf_common+0x58>
 8004828:	2301      	movs	r3, #1
 800482a:	4622      	mov	r2, r4
 800482c:	4649      	mov	r1, r9
 800482e:	4638      	mov	r0, r7
 8004830:	47c0      	blx	r8
 8004832:	3001      	adds	r0, #1
 8004834:	d0e6      	beq.n	8004804 <_printf_common+0xa4>
 8004836:	3601      	adds	r6, #1
 8004838:	e7d9      	b.n	80047ee <_printf_common+0x8e>
	...

0800483c <_printf_i>:
 800483c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004840:	7e0f      	ldrb	r7, [r1, #24]
 8004842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004844:	2f78      	cmp	r7, #120	; 0x78
 8004846:	4691      	mov	r9, r2
 8004848:	4680      	mov	r8, r0
 800484a:	460c      	mov	r4, r1
 800484c:	469a      	mov	sl, r3
 800484e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004852:	d807      	bhi.n	8004864 <_printf_i+0x28>
 8004854:	2f62      	cmp	r7, #98	; 0x62
 8004856:	d80a      	bhi.n	800486e <_printf_i+0x32>
 8004858:	2f00      	cmp	r7, #0
 800485a:	f000 80d4 	beq.w	8004a06 <_printf_i+0x1ca>
 800485e:	2f58      	cmp	r7, #88	; 0x58
 8004860:	f000 80c0 	beq.w	80049e4 <_printf_i+0x1a8>
 8004864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800486c:	e03a      	b.n	80048e4 <_printf_i+0xa8>
 800486e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004872:	2b15      	cmp	r3, #21
 8004874:	d8f6      	bhi.n	8004864 <_printf_i+0x28>
 8004876:	a101      	add	r1, pc, #4	; (adr r1, 800487c <_printf_i+0x40>)
 8004878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800487c:	080048d5 	.word	0x080048d5
 8004880:	080048e9 	.word	0x080048e9
 8004884:	08004865 	.word	0x08004865
 8004888:	08004865 	.word	0x08004865
 800488c:	08004865 	.word	0x08004865
 8004890:	08004865 	.word	0x08004865
 8004894:	080048e9 	.word	0x080048e9
 8004898:	08004865 	.word	0x08004865
 800489c:	08004865 	.word	0x08004865
 80048a0:	08004865 	.word	0x08004865
 80048a4:	08004865 	.word	0x08004865
 80048a8:	080049ed 	.word	0x080049ed
 80048ac:	08004915 	.word	0x08004915
 80048b0:	080049a7 	.word	0x080049a7
 80048b4:	08004865 	.word	0x08004865
 80048b8:	08004865 	.word	0x08004865
 80048bc:	08004a0f 	.word	0x08004a0f
 80048c0:	08004865 	.word	0x08004865
 80048c4:	08004915 	.word	0x08004915
 80048c8:	08004865 	.word	0x08004865
 80048cc:	08004865 	.word	0x08004865
 80048d0:	080049af 	.word	0x080049af
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	1d1a      	adds	r2, r3, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	602a      	str	r2, [r5, #0]
 80048dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048e4:	2301      	movs	r3, #1
 80048e6:	e09f      	b.n	8004a28 <_printf_i+0x1ec>
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	682b      	ldr	r3, [r5, #0]
 80048ec:	0607      	lsls	r7, r0, #24
 80048ee:	f103 0104 	add.w	r1, r3, #4
 80048f2:	6029      	str	r1, [r5, #0]
 80048f4:	d501      	bpl.n	80048fa <_printf_i+0xbe>
 80048f6:	681e      	ldr	r6, [r3, #0]
 80048f8:	e003      	b.n	8004902 <_printf_i+0xc6>
 80048fa:	0646      	lsls	r6, r0, #25
 80048fc:	d5fb      	bpl.n	80048f6 <_printf_i+0xba>
 80048fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004902:	2e00      	cmp	r6, #0
 8004904:	da03      	bge.n	800490e <_printf_i+0xd2>
 8004906:	232d      	movs	r3, #45	; 0x2d
 8004908:	4276      	negs	r6, r6
 800490a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800490e:	485a      	ldr	r0, [pc, #360]	; (8004a78 <_printf_i+0x23c>)
 8004910:	230a      	movs	r3, #10
 8004912:	e012      	b.n	800493a <_printf_i+0xfe>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	6820      	ldr	r0, [r4, #0]
 8004918:	1d19      	adds	r1, r3, #4
 800491a:	6029      	str	r1, [r5, #0]
 800491c:	0605      	lsls	r5, r0, #24
 800491e:	d501      	bpl.n	8004924 <_printf_i+0xe8>
 8004920:	681e      	ldr	r6, [r3, #0]
 8004922:	e002      	b.n	800492a <_printf_i+0xee>
 8004924:	0641      	lsls	r1, r0, #25
 8004926:	d5fb      	bpl.n	8004920 <_printf_i+0xe4>
 8004928:	881e      	ldrh	r6, [r3, #0]
 800492a:	4853      	ldr	r0, [pc, #332]	; (8004a78 <_printf_i+0x23c>)
 800492c:	2f6f      	cmp	r7, #111	; 0x6f
 800492e:	bf0c      	ite	eq
 8004930:	2308      	moveq	r3, #8
 8004932:	230a      	movne	r3, #10
 8004934:	2100      	movs	r1, #0
 8004936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800493a:	6865      	ldr	r5, [r4, #4]
 800493c:	60a5      	str	r5, [r4, #8]
 800493e:	2d00      	cmp	r5, #0
 8004940:	bfa2      	ittt	ge
 8004942:	6821      	ldrge	r1, [r4, #0]
 8004944:	f021 0104 	bicge.w	r1, r1, #4
 8004948:	6021      	strge	r1, [r4, #0]
 800494a:	b90e      	cbnz	r6, 8004950 <_printf_i+0x114>
 800494c:	2d00      	cmp	r5, #0
 800494e:	d04b      	beq.n	80049e8 <_printf_i+0x1ac>
 8004950:	4615      	mov	r5, r2
 8004952:	fbb6 f1f3 	udiv	r1, r6, r3
 8004956:	fb03 6711 	mls	r7, r3, r1, r6
 800495a:	5dc7      	ldrb	r7, [r0, r7]
 800495c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004960:	4637      	mov	r7, r6
 8004962:	42bb      	cmp	r3, r7
 8004964:	460e      	mov	r6, r1
 8004966:	d9f4      	bls.n	8004952 <_printf_i+0x116>
 8004968:	2b08      	cmp	r3, #8
 800496a:	d10b      	bne.n	8004984 <_printf_i+0x148>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	07de      	lsls	r6, r3, #31
 8004970:	d508      	bpl.n	8004984 <_printf_i+0x148>
 8004972:	6923      	ldr	r3, [r4, #16]
 8004974:	6861      	ldr	r1, [r4, #4]
 8004976:	4299      	cmp	r1, r3
 8004978:	bfde      	ittt	le
 800497a:	2330      	movle	r3, #48	; 0x30
 800497c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004980:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004984:	1b52      	subs	r2, r2, r5
 8004986:	6122      	str	r2, [r4, #16]
 8004988:	f8cd a000 	str.w	sl, [sp]
 800498c:	464b      	mov	r3, r9
 800498e:	aa03      	add	r2, sp, #12
 8004990:	4621      	mov	r1, r4
 8004992:	4640      	mov	r0, r8
 8004994:	f7ff fee4 	bl	8004760 <_printf_common>
 8004998:	3001      	adds	r0, #1
 800499a:	d14a      	bne.n	8004a32 <_printf_i+0x1f6>
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	b004      	add	sp, #16
 80049a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	f043 0320 	orr.w	r3, r3, #32
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	4833      	ldr	r0, [pc, #204]	; (8004a7c <_printf_i+0x240>)
 80049b0:	2778      	movs	r7, #120	; 0x78
 80049b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	6829      	ldr	r1, [r5, #0]
 80049ba:	061f      	lsls	r7, r3, #24
 80049bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80049c0:	d402      	bmi.n	80049c8 <_printf_i+0x18c>
 80049c2:	065f      	lsls	r7, r3, #25
 80049c4:	bf48      	it	mi
 80049c6:	b2b6      	uxthmi	r6, r6
 80049c8:	07df      	lsls	r7, r3, #31
 80049ca:	bf48      	it	mi
 80049cc:	f043 0320 	orrmi.w	r3, r3, #32
 80049d0:	6029      	str	r1, [r5, #0]
 80049d2:	bf48      	it	mi
 80049d4:	6023      	strmi	r3, [r4, #0]
 80049d6:	b91e      	cbnz	r6, 80049e0 <_printf_i+0x1a4>
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	f023 0320 	bic.w	r3, r3, #32
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	2310      	movs	r3, #16
 80049e2:	e7a7      	b.n	8004934 <_printf_i+0xf8>
 80049e4:	4824      	ldr	r0, [pc, #144]	; (8004a78 <_printf_i+0x23c>)
 80049e6:	e7e4      	b.n	80049b2 <_printf_i+0x176>
 80049e8:	4615      	mov	r5, r2
 80049ea:	e7bd      	b.n	8004968 <_printf_i+0x12c>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	6826      	ldr	r6, [r4, #0]
 80049f0:	6961      	ldr	r1, [r4, #20]
 80049f2:	1d18      	adds	r0, r3, #4
 80049f4:	6028      	str	r0, [r5, #0]
 80049f6:	0635      	lsls	r5, r6, #24
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	d501      	bpl.n	8004a00 <_printf_i+0x1c4>
 80049fc:	6019      	str	r1, [r3, #0]
 80049fe:	e002      	b.n	8004a06 <_printf_i+0x1ca>
 8004a00:	0670      	lsls	r0, r6, #25
 8004a02:	d5fb      	bpl.n	80049fc <_printf_i+0x1c0>
 8004a04:	8019      	strh	r1, [r3, #0]
 8004a06:	2300      	movs	r3, #0
 8004a08:	6123      	str	r3, [r4, #16]
 8004a0a:	4615      	mov	r5, r2
 8004a0c:	e7bc      	b.n	8004988 <_printf_i+0x14c>
 8004a0e:	682b      	ldr	r3, [r5, #0]
 8004a10:	1d1a      	adds	r2, r3, #4
 8004a12:	602a      	str	r2, [r5, #0]
 8004a14:	681d      	ldr	r5, [r3, #0]
 8004a16:	6862      	ldr	r2, [r4, #4]
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f7fb fbe0 	bl	80001e0 <memchr>
 8004a20:	b108      	cbz	r0, 8004a26 <_printf_i+0x1ea>
 8004a22:	1b40      	subs	r0, r0, r5
 8004a24:	6060      	str	r0, [r4, #4]
 8004a26:	6863      	ldr	r3, [r4, #4]
 8004a28:	6123      	str	r3, [r4, #16]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a30:	e7aa      	b.n	8004988 <_printf_i+0x14c>
 8004a32:	6923      	ldr	r3, [r4, #16]
 8004a34:	462a      	mov	r2, r5
 8004a36:	4649      	mov	r1, r9
 8004a38:	4640      	mov	r0, r8
 8004a3a:	47d0      	blx	sl
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	d0ad      	beq.n	800499c <_printf_i+0x160>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	079b      	lsls	r3, r3, #30
 8004a44:	d413      	bmi.n	8004a6e <_printf_i+0x232>
 8004a46:	68e0      	ldr	r0, [r4, #12]
 8004a48:	9b03      	ldr	r3, [sp, #12]
 8004a4a:	4298      	cmp	r0, r3
 8004a4c:	bfb8      	it	lt
 8004a4e:	4618      	movlt	r0, r3
 8004a50:	e7a6      	b.n	80049a0 <_printf_i+0x164>
 8004a52:	2301      	movs	r3, #1
 8004a54:	4632      	mov	r2, r6
 8004a56:	4649      	mov	r1, r9
 8004a58:	4640      	mov	r0, r8
 8004a5a:	47d0      	blx	sl
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d09d      	beq.n	800499c <_printf_i+0x160>
 8004a60:	3501      	adds	r5, #1
 8004a62:	68e3      	ldr	r3, [r4, #12]
 8004a64:	9903      	ldr	r1, [sp, #12]
 8004a66:	1a5b      	subs	r3, r3, r1
 8004a68:	42ab      	cmp	r3, r5
 8004a6a:	dcf2      	bgt.n	8004a52 <_printf_i+0x216>
 8004a6c:	e7eb      	b.n	8004a46 <_printf_i+0x20a>
 8004a6e:	2500      	movs	r5, #0
 8004a70:	f104 0619 	add.w	r6, r4, #25
 8004a74:	e7f5      	b.n	8004a62 <_printf_i+0x226>
 8004a76:	bf00      	nop
 8004a78:	08004bf1 	.word	0x08004bf1
 8004a7c:	08004c02 	.word	0x08004c02

08004a80 <memmove>:
 8004a80:	4288      	cmp	r0, r1
 8004a82:	b510      	push	{r4, lr}
 8004a84:	eb01 0402 	add.w	r4, r1, r2
 8004a88:	d902      	bls.n	8004a90 <memmove+0x10>
 8004a8a:	4284      	cmp	r4, r0
 8004a8c:	4623      	mov	r3, r4
 8004a8e:	d807      	bhi.n	8004aa0 <memmove+0x20>
 8004a90:	1e43      	subs	r3, r0, #1
 8004a92:	42a1      	cmp	r1, r4
 8004a94:	d008      	beq.n	8004aa8 <memmove+0x28>
 8004a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a9e:	e7f8      	b.n	8004a92 <memmove+0x12>
 8004aa0:	4402      	add	r2, r0
 8004aa2:	4601      	mov	r1, r0
 8004aa4:	428a      	cmp	r2, r1
 8004aa6:	d100      	bne.n	8004aaa <memmove+0x2a>
 8004aa8:	bd10      	pop	{r4, pc}
 8004aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ab2:	e7f7      	b.n	8004aa4 <memmove+0x24>

08004ab4 <_sbrk_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4d06      	ldr	r5, [pc, #24]	; (8004ad0 <_sbrk_r+0x1c>)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	602b      	str	r3, [r5, #0]
 8004ac0:	f7fc fef4 	bl	80018ac <_sbrk>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_sbrk_r+0x1a>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_sbrk_r+0x1a>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	20000284 	.word	0x20000284

08004ad4 <memcpy>:
 8004ad4:	440a      	add	r2, r1
 8004ad6:	4291      	cmp	r1, r2
 8004ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004adc:	d100      	bne.n	8004ae0 <memcpy+0xc>
 8004ade:	4770      	bx	lr
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aea:	4291      	cmp	r1, r2
 8004aec:	d1f9      	bne.n	8004ae2 <memcpy+0xe>
 8004aee:	bd10      	pop	{r4, pc}

08004af0 <_realloc_r>:
 8004af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af4:	4680      	mov	r8, r0
 8004af6:	4614      	mov	r4, r2
 8004af8:	460e      	mov	r6, r1
 8004afa:	b921      	cbnz	r1, 8004b06 <_realloc_r+0x16>
 8004afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b00:	4611      	mov	r1, r2
 8004b02:	f7ff bc49 	b.w	8004398 <_malloc_r>
 8004b06:	b92a      	cbnz	r2, 8004b14 <_realloc_r+0x24>
 8004b08:	f7ff fbda 	bl	80042c0 <_free_r>
 8004b0c:	4625      	mov	r5, r4
 8004b0e:	4628      	mov	r0, r5
 8004b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b14:	f000 f81b 	bl	8004b4e <_malloc_usable_size_r>
 8004b18:	4284      	cmp	r4, r0
 8004b1a:	4607      	mov	r7, r0
 8004b1c:	d802      	bhi.n	8004b24 <_realloc_r+0x34>
 8004b1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b22:	d812      	bhi.n	8004b4a <_realloc_r+0x5a>
 8004b24:	4621      	mov	r1, r4
 8004b26:	4640      	mov	r0, r8
 8004b28:	f7ff fc36 	bl	8004398 <_malloc_r>
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d0ed      	beq.n	8004b0e <_realloc_r+0x1e>
 8004b32:	42bc      	cmp	r4, r7
 8004b34:	4622      	mov	r2, r4
 8004b36:	4631      	mov	r1, r6
 8004b38:	bf28      	it	cs
 8004b3a:	463a      	movcs	r2, r7
 8004b3c:	f7ff ffca 	bl	8004ad4 <memcpy>
 8004b40:	4631      	mov	r1, r6
 8004b42:	4640      	mov	r0, r8
 8004b44:	f7ff fbbc 	bl	80042c0 <_free_r>
 8004b48:	e7e1      	b.n	8004b0e <_realloc_r+0x1e>
 8004b4a:	4635      	mov	r5, r6
 8004b4c:	e7df      	b.n	8004b0e <_realloc_r+0x1e>

08004b4e <_malloc_usable_size_r>:
 8004b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b52:	1f18      	subs	r0, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bfbc      	itt	lt
 8004b58:	580b      	ldrlt	r3, [r1, r0]
 8004b5a:	18c0      	addlt	r0, r0, r3
 8004b5c:	4770      	bx	lr
	...

08004b60 <_init>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr

08004b6c <_fini>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr
